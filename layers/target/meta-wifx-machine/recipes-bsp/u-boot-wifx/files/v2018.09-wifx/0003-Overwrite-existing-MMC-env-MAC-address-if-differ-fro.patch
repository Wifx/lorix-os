From 2834c7b62daaaae2982109dd50c12f234e9d2926 Mon Sep 17 00:00:00 2001
From: Yannick Lanz <yannick.lanz@wifx.net>
Date: Fri, 22 Feb 2019 11:25:49 +0100
Subject: [PATCH 3/3] Overwrite existing MMC env MAC address if differ from the
 EEPROM In case of NAND, keep the standard behavior (once MAC set, can not be
 changed)

---
 board/wifx/common/mac_eeprom.c | 34 ++++++++++++++++++++++++++++++----
 cmd/nvedit.c                   | 16 +++++++++++++---
 include/common.h               | 12 ++++++++++++
 3 files changed, 55 insertions(+), 7 deletions(-)

diff --git a/board/wifx/common/mac_eeprom.c b/board/wifx/common/mac_eeprom.c
index ddd4648853..76b6923c8f 100644
--- a/board/wifx/common/mac_eeprom.c
+++ b/board/wifx/common/mac_eeprom.c
@@ -17,22 +17,48 @@ int at91_set_ethaddr(int offset)
 	const int ETH_ADDR_LEN = 6;
 	unsigned char ethaddr[ETH_ADDR_LEN];
 	const char *ETHADDR_NAME = "ethaddr";
+	char envbuf[ARP_HLEN_ASCII + 1];
 	struct udevice *dev;
 	int ret;
 
-	if (env_get(ETHADDR_NAME))
+	// retrieve mac address from env (true if exists and valid)
+	ret = eth_env_get_enetaddr(ETHADDR_NAME, (uint8_t *)envbuf);
+
+#ifndef CONFIG_ENV_IS_IN_MMC
+	// if valid and env not in mmc, we keep the mac as it is
+	if (ret)
 		return 0;
+#endif
 
+	// if env is in mmc, we read the mac from eeprom in all cases
 	ret = uclass_first_device_err(UCLASS_I2C_EEPROM, &dev);
 	if (ret)
 		return ret;
 
-	ret = i2c_eeprom_read(dev, offset, ethaddr, 6);
+	ret = i2c_eeprom_read(dev, offset, ethaddr, ETH_ADDR_LEN);
 	if (ret)
 		return ret;
 
-	if (is_valid_ethaddr(ethaddr))
-		eth_env_set_enetaddr(ETHADDR_NAME, ethaddr);
+	if (is_valid_ethaddr(ethaddr)){
+		char envbufnew[ARP_HLEN_ASCII + 1];
+		sprintf(envbufnew, "%pM", ethaddr);
+
+		// we compare env mac and eeprom mac
+		if(memcmp(envbuf, ethaddr, ETH_ADDR_LEN) == 0){
+			// addresses are the same, don't update it
+			return 0;
+		}
+
+#ifdef CONFIG_ENV_IS_IN_MMC
+		// update the mac address and save the environment only if env is in MMC
+		return env_set_force(ETHADDR_NAME, envbufnew) && env_save();
+#else
+		// if env not in mmc, we update the volatile env but don't save it
+		// if env not in mmc, we can be here only is mac address not found in env,
+		// so env_set_force is not needed (or should not)
+		return env_set(ETHADDR_NAME, envbufnew);
+#endif
+	}
 
 	return 0;
 }
diff --git a/cmd/nvedit.c b/cmd/nvedit.c
index 793b68b887..c4b5d8561f 100644
--- a/cmd/nvedit.c
+++ b/cmd/nvedit.c
@@ -281,7 +281,7 @@ static int _do_env_set(int flag, int argc, char * const argv[], int env_flag)
 	return 0;
 }
 
-int env_set(const char *varname, const char *varvalue)
+static int env_set_generic(const char *varname, const char *varvalue, int env_flag)
 {
 	const char * const argv[4] = { "setenv", varname, varvalue, NULL };
 
@@ -290,9 +290,19 @@ int env_set(const char *varname, const char *varvalue)
 		return 1;
 
 	if (varvalue == NULL || varvalue[0] == '\0')
-		return _do_env_set(0, 2, (char * const *)argv, H_PROGRAMMATIC);
+		return _do_env_set(0, 2, (char * const *)argv, env_flag);
 	else
-		return _do_env_set(0, 3, (char * const *)argv, H_PROGRAMMATIC);
+		return _do_env_set(0, 3, (char * const *)argv, env_flag);
+}
+
+int env_set(const char *varname, const char *varvalue)
+{
+	return env_set_generic(varname, varvalue, H_PROGRAMMATIC);
+}
+
+int env_set_force(const char *varname, const char *varvalue)
+{
+	return env_set_generic(varname, varvalue, H_PROGRAMMATIC | H_FORCE);
 }
 
 /**
diff --git a/include/common.h b/include/common.h
index 940161f175..c8fc101c4a 100644
--- a/include/common.h
+++ b/include/common.h
@@ -212,6 +212,18 @@ int env_get_yesno(const char *var);
  */
 int env_set(const char *varname, const char *value);
 
+/**
+ * env_set_force() - set an environment variable with force flag
+ *
+ * This sets or deletes the value of an environment variable. For setting the
+ * value the variable is created if it does not already exist.
+ *
+ * @varname: Variable to adjust
+ * @value: Value to set for the variable, or NULL or "" to delete the variable
+ * @return 0 if OK, 1 on error
+ */
+int env_set_force(const char *varname, const char *value);
+
 /**
  * env_set_ulong() - set an environment variable to an integer
  *
-- 
2.17.1

