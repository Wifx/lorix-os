From 7e998e747c0b0b205432a5341e38af037b621f5b Mon Sep 17 00:00:00 2001
From: Yannick Lanz <yannick.lanz@wifx.net>
Date: Fri, 13 Aug 2021 11:03:39 +0200
Subject: [PATCH 7/7] l1: fix usb data_mode sysfs store function doesn't return
 correct written length

Signed-off-by: Yannick Lanz <yannick.lanz@wifx.net>
---
 drivers/mfd/wgw-ctrl-i2c.c  |  9 +++++++--
 drivers/mfd/wgw-ctrl-usbc.c | 11 +++++++----
 2 files changed, 14 insertions(+), 6 deletions(-)

diff --git a/drivers/mfd/wgw-ctrl-i2c.c b/drivers/mfd/wgw-ctrl-i2c.c
index df5c0a9baa04..f3d5ad6ddd2e 100644
--- a/drivers/mfd/wgw-ctrl-i2c.c
+++ b/drivers/mfd/wgw-ctrl-i2c.c
@@ -24,6 +24,8 @@
 #include <linux/mfd/wgw-ctrl/core.h>
 #include <linux/mfd/wgw-ctrl/reg.h>
 
+#define PAQUET_MAX_LEN 32
+
 static int wgw_ctrl_i2c_read_device(struct wgw_ctrl_dev *wgw, char reg,
 				    void *dest, int bytes)
 {
@@ -31,6 +33,9 @@ static int wgw_ctrl_i2c_read_device(struct wgw_ctrl_dev *wgw, char reg,
 	struct i2c_msg xfer[2];
 	int ret;
 
+	if (bytes > PAQUET_MAX_LEN)
+		return -EINVAL;
+
 	/* Send the register */
 	xfer[0].addr = i2c->addr;
 	xfer[0].flags = 0;
@@ -57,10 +62,10 @@ static int wgw_ctrl_i2c_write_device(struct wgw_ctrl_dev *wgw, char reg,
 {
 	struct i2c_client *i2c = wgw->i2c;
 	/* we add 1 byte for device register */
-	u8 msg[WGW_CTRL_REG_MAX + 1];
+	u8 msg[PAQUET_MAX_LEN + 1];
 	int ret;
 
-	if (bytes > WGW_CTRL_REG_MAX)
+	if (bytes > PAQUET_MAX_LEN)
 		return -EINVAL;
 
 	msg[0] = reg;
diff --git a/drivers/mfd/wgw-ctrl-usbc.c b/drivers/mfd/wgw-ctrl-usbc.c
index fc3b78100705..55bec64e3ffe 100644
--- a/drivers/mfd/wgw-ctrl-usbc.c
+++ b/drivers/mfd/wgw-ctrl-usbc.c
@@ -146,15 +146,18 @@ static ssize_t data_mode_store(struct device *dev,
 	struct wgw_ctrl_usbc_dev *usbc = dev_get_drvdata(dev);
 	ssize_t status;
 
-	if (strlen("device\n") == count && !strncmp(buf, "device\n", count)) {
+	static const char *device_str = "device\n";
+	static const char *host_str = "host\n";
+
+	if (strlen(device_str) == count && !strncmp(buf, device_str, count)) {
 		status = data_mode_set(usbc, USB_DATA_MODE_DEVICE);
-	} else if (strlen("host\n") == count &&
-		   !strncmp(buf, "host\n", count)) {
+	} else if (strlen(host_str) == count &&
+		   !strncmp(buf, host_str, count)) {
 		status = data_mode_set(usbc, USB_DATA_MODE_HOST);
 	} else {
 		status = -EINVAL;
 	}
-	return status ?: count;
+	return status < 0 ? status : count;
 }
 
 static DEVICE_ATTR(power_mode, S_IRUGO, power_mode_show, NULL);
-- 
2.25.1

