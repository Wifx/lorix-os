From da0f8abe8b6511c7e0d35b9eefd06356ac8c6a69 Mon Sep 17 00:00:00 2001
From: Yannick Lanz <yannick.lanz@wifx.net>
Date: Mon, 11 May 2020 12:01:38 +0200
Subject: [PATCH 2/3] Add LORIX One support

---
 contrib/board/Config.in.board                 |   2 +
 contrib/board/Config.in.boardname             |   2 +
 contrib/board/Config.in.linux_arg             |   2 +
 .../board/wifx/lorix_one_256/Config.in.board  |  16 +
 .../wifx/lorix_one_256/Config.in.boardname    |   2 +
 .../wifx/lorix_one_256/Config.in.linux_arg    |   3 +
 contrib/board/wifx/lorix_one_256/board.mk     |   2 +
 .../board/wifx/lorix_one_256/lorix_one_256.c  | 745 ++++++++++++++++++
 .../board/wifx/lorix_one_256/lorix_one_256.h  |  97 +++
 .../lorix_one_256_nf_uboot_defconfig          |   9 +
 .../lorix_one_256_sd_uboot_defconfig          |   9 +
 .../board/wifx/lorix_one_512/Config.in.board  |  16 +
 .../wifx/lorix_one_512/Config.in.boardname    |   2 +
 .../wifx/lorix_one_512/Config.in.linux_arg    |   3 +
 contrib/board/wifx/lorix_one_512/board.mk     |   2 +
 .../board/wifx/lorix_one_512/lorix_one_512.c  | 745 ++++++++++++++++++
 .../board/wifx/lorix_one_512/lorix_one_512.h  |  97 +++
 .../lorix_one_512_nf_uboot_defconfig          |   9 +
 .../lorix_one_512_sd_uboot_defconfig          |   9 +
 contrib/include/contrib_board.h               |   8 +
 driver/at91_twi.c                             |   2 +
 driver/board_hw_info.c                        |  40 +
 include/board_hw_info.h                       |   3 +
 include/twi.h                                 |   1 +
 scripts/addpmecchead.py                       |   6 +-
 25 files changed, 1831 insertions(+), 1 deletion(-)
 create mode 100644 contrib/board/wifx/lorix_one_256/Config.in.board
 create mode 100644 contrib/board/wifx/lorix_one_256/Config.in.boardname
 create mode 100644 contrib/board/wifx/lorix_one_256/Config.in.linux_arg
 create mode 100644 contrib/board/wifx/lorix_one_256/board.mk
 create mode 100644 contrib/board/wifx/lorix_one_256/lorix_one_256.c
 create mode 100644 contrib/board/wifx/lorix_one_256/lorix_one_256.h
 create mode 100644 contrib/board/wifx/lorix_one_256/lorix_one_256_nf_uboot_defconfig
 create mode 100644 contrib/board/wifx/lorix_one_256/lorix_one_256_sd_uboot_defconfig
 create mode 100644 contrib/board/wifx/lorix_one_512/Config.in.board
 create mode 100644 contrib/board/wifx/lorix_one_512/Config.in.boardname
 create mode 100644 contrib/board/wifx/lorix_one_512/Config.in.linux_arg
 create mode 100644 contrib/board/wifx/lorix_one_512/board.mk
 create mode 100644 contrib/board/wifx/lorix_one_512/lorix_one_512.c
 create mode 100644 contrib/board/wifx/lorix_one_512/lorix_one_512.h
 create mode 100644 contrib/board/wifx/lorix_one_512/lorix_one_512_nf_uboot_defconfig
 create mode 100644 contrib/board/wifx/lorix_one_512/lorix_one_512_sd_uboot_defconfig

diff --git a/contrib/board/Config.in.board b/contrib/board/Config.in.board
index 7e6eb97..c73cc73 100644
--- a/contrib/board/Config.in.board
+++ b/contrib/board/Config.in.board
@@ -10,3 +10,5 @@ source "contrib/board/corewind/core9g25/Config.in.board"
 source "contrib/board/axentia/sama5d3_linea/Config.in.board"
 source "contrib/board/mini-box/pico_sam9g45/Config.in.board"
 source "contrib/board/stephan/sama5d3_stephan/Config.in.board"
+source "contrib/board/wifx/lorix_one_256/Config.in.board"
+source "contrib/board/wifx/lorix_one_512/Config.in.board"
diff --git a/contrib/board/Config.in.boardname b/contrib/board/Config.in.boardname
index 123ec74..bb11763 100644
--- a/contrib/board/Config.in.boardname
+++ b/contrib/board/Config.in.boardname
@@ -10,3 +10,5 @@ source "contrib/board/corewind/core9g25/Config.in.boardname"
 source "contrib/board/axentia/sama5d3_linea/Config.in.boardname"
 source "contrib/board/mini-box/pico_sam9g45/Config.in.boardname"
 source "contrib/board/stephan/sama5d3_stephan/Config.in.boardname"
+source "contrib/board/wifx/lorix_one_256/Config.in.boardname"
+source "contrib/board/wifx/lorix_one_512/Config.in.boardname"
diff --git a/contrib/board/Config.in.linux_arg b/contrib/board/Config.in.linux_arg
index c29954d..16aa04e 100644
--- a/contrib/board/Config.in.linux_arg
+++ b/contrib/board/Config.in.linux_arg
@@ -10,3 +10,5 @@ source "contrib/board/corewind/core9g25/Config.in.linux_arg"
 source "contrib/board/axentia/sama5d3_linea/Config.in.linux_arg"
 source "contrib/board/mini-box/pico_sam9g45/Config.in.linux_arg"
 source "contrib/board/stephan/sama5d3_stephan/Config.in.linux_arg"
+source "contrib/board/wifx/lorix_one_256/Config.in.linux_arg"
+source "contrib/board/wifx/lorix_one_512/Config.in.linux_arg"
diff --git a/contrib/board/wifx/lorix_one_256/Config.in.board b/contrib/board/wifx/lorix_one_256/Config.in.board
new file mode 100644
index 0000000..7cf9f3c
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_256/Config.in.board
@@ -0,0 +1,16 @@
+config CONFIG_LORIX_ONE_256
+	bool "lorix_one_256"
+	select SAMA5D4
+	select CONFIG_CPU_V7
+	select CONFIG_DDRC
+	select ALLOW_NANDFLASH
+	select ALLOW_SDCARD
+	select ALLOW_CPU_CLK_600MHZ
+	select ALLOW_CRYSTAL_12_000MHZ
+	select CONFIG_HAS_EEPROM
+	select CONFIG_HAS_PMIC_ACT8865
+	select CONFIG_SUPPORT_PM
+	select CONFIG_HAS_EHT0_PHY
+	select SUPPORT_BUS_SPEED_200MHZ
+	help
+	  Use the LORIX One LoRa gateway board (256MB NAND version)
diff --git a/contrib/board/wifx/lorix_one_256/Config.in.boardname b/contrib/board/wifx/lorix_one_256/Config.in.boardname
new file mode 100644
index 0000000..779e43c
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_256/Config.in.boardname
@@ -0,0 +1,2 @@
+config CONFIG_BOARDNAME
+	default "lorix_one_256" if CONFIG_LORIX_ONE_256
diff --git a/contrib/board/wifx/lorix_one_256/Config.in.linux_arg b/contrib/board/wifx/lorix_one_256/Config.in.linux_arg
new file mode 100644
index 0000000..061762d
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_256/Config.in.linux_arg
@@ -0,0 +1,3 @@
+config CONFIG_LINUX_KERNEL_ARG_STRING
+	default "console=ttyS0,115200 mtdparts=atmel_nand:8M(bootstrap/kernel)ro,-(rootfs) rw rootfstype=ubifs ubi.mtd=1 root=ubi0:rootfs" if CONFIG_LORIX_ONE_256 && !CONFIG_SDCARD
+	default "console=ttyS0,115200 root=/dev/mmcblk0p2 rootdelay=2" if CONFIG_LORIX_ONE_256 && CONFIG_SDCARD
diff --git a/contrib/board/wifx/lorix_one_256/board.mk b/contrib/board/wifx/lorix_one_256/board.mk
new file mode 100644
index 0000000..8976886
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_256/board.mk
@@ -0,0 +1,2 @@
+CPPFLAGS += -DCONFIG_LORIX_ONE_256
+ASFLAGS += -DCONFIG_LORIX_ONE_256
diff --git a/contrib/board/wifx/lorix_one_256/lorix_one_256.c b/contrib/board/wifx/lorix_one_256/lorix_one_256.c
new file mode 100644
index 0000000..bf346f1
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_256/lorix_one_256.c
@@ -0,0 +1,745 @@
+/* ----------------------------------------------------------------------------
+ *         ATMEL Microcontroller Software Support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2014, Atmel Corporation
+ * Copyright (c) 2016-2020, Wifx SÃ rl
+ *                          Yannick Lanz <yannick.lanz@wifx.net>
+ *
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the disclaimer below.
+ *
+ * Atmel's name may not be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#include "common.h"
+#include "hardware.h"
+#include "pmc.h"
+#include "usart.h"
+#include "debug.h"
+#include "ddramc.h"
+#include "gpio.h"
+#include "timer.h"
+#include "watchdog.h"
+#include "string.h"
+
+#include "arch/at91_pmc/pmc.h"
+#include "arch/at91_rstc.h"
+#include "arch/sama5_smc.h"
+#include "arch/at91_pio.h"
+#include "arch/at91_ddrsdrc.h"
+#include "arch/at91_sfr.h"
+#include "arch/tz_matrix.h"
+#include "lorix_one_256.h"
+#include "tz_utils.h"
+#include "l2cc.h"
+#include "matrix.h"
+#include "act8865.h"
+#include "twi.h"
+
+static void at91_dbgu_hw_init(void)
+{
+	const struct pio_desc dbgu_pins[] = {
+		{"RXD", AT91C_PIN_PE(16), 0, PIO_DEFAULT, PIO_PERIPH_B},
+		{"TXD", AT91C_PIN_PE(17), 0, PIO_DEFAULT, PIO_PERIPH_B},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	pio_configure(dbgu_pins);
+	pmc_enable_periph_clock(AT91C_ID_PIOE);
+	pmc_enable_periph_clock(AT91C_ID_USART3);
+}
+
+static void initialize_dbgu(void)
+{
+	unsigned int baudrate = 115200;
+
+	at91_dbgu_hw_init();
+
+	if (pmc_check_mck_h32mxdiv())
+		usart_init(BAUDRATE(MASTER_CLOCK / 2, baudrate));
+	else
+		usart_init(BAUDRATE(MASTER_CLOCK, baudrate));
+}
+
+#ifdef CONFIG_DDR2
+static void ddramc_reg_config(struct ddramc_register *ddramc_config)
+{
+	ddramc_config->mdr = (AT91C_DDRC2_DBW_16_BITS
+				| AT91C_DDRC2_MD_DDR2_SDRAM);
+
+	ddramc_config->cr = (AT91C_DDRC2_NC_DDR10_SDR9
+				| AT91C_DDRC2_NR_13
+				| AT91C_DDRC2_CAS_5
+				| AT91C_DDRC2_DISABLE_RESET_DLL
+				| AT91C_DDRC2_ENABLE_DLL
+				| AT91C_DDRC2_NB_BANKS_8
+				| AT91C_DDRC2_DECOD_INTERLEAVED
+				| AT91C_DDRC2_UNAL_SUPPORTED);
+
+#if defined(CONFIG_BUS_SPEED_200MHZ)
+
+	ddramc_config->rtr = 0x61B;
+
+	ddramc_config->t0pr = (AT91C_DDRC2_TRAS_(9)
+			| AT91C_DDRC2_TRCD_(3)
+			| AT91C_DDRC2_TWR_(3)
+			| AT91C_DDRC2_TRC_(12)
+			| AT91C_DDRC2_TRP_(3)
+			| AT91C_DDRC2_TRRD_(2)
+			| AT91C_DDRC2_TWTR_(2)
+			| AT91C_DDRC2_TMRD_(2));
+
+	ddramc_config->t1pr = (AT91C_DDRC2_TXP_(2)
+			| AT91C_DDRC2_TXSRD_(200)
+			| AT91C_DDRC2_TXSNR_(28)
+			| AT91C_DDRC2_TRFC_(26));
+
+	ddramc_config->t2pr = (AT91C_DDRC2_TFAW_(9)
+			| AT91C_DDRC2_TRTP_(2)
+			| AT91C_DDRC2_TRPA_(3)
+			| AT91C_DDRC2_TXARDS_(8)
+			| AT91C_DDRC2_TXARD_(2));
+
+#else
+#error "No CLK setting defined"
+#endif
+}
+
+static void ddramc_init(void)
+{
+	struct ddramc_register ddramc_reg;
+	unsigned int reg;
+
+	ddramc_reg_config(&ddramc_reg);
+
+	/* enable ddr2 clock */
+	pmc_enable_periph_clock(AT91C_ID_MPDDRC);
+	pmc_enable_system_clock(AT91C_PMC_DDR);
+
+	/* configure Shift Sampling Point of Data */
+#if defined(CONFIG_BUS_SPEED_200MHZ)
+	reg = AT91C_MPDDRC_RD_DATA_PATH_TWO_CYCLES;
+#else
+	reg = AT91C_MPDDRC_RD_DATA_PATH_ONE_CYCLES;
+#endif
+	writel(reg, (AT91C_BASE_MPDDRC + MPDDRC_RD_DATA_PATH));
+
+	/* MPDDRC I/O Calibration Register */
+	reg = readl(AT91C_BASE_MPDDRC + MPDDRC_IO_CALIBR);
+	reg &= ~AT91C_MPDDRC_RDIV;
+	reg &= ~AT91C_MPDDRC_TZQIO;
+	reg &= ~AT91C_MPDDRC_CALCODEP;
+	reg &= ~AT91C_MPDDRC_CALCODEN;
+	reg |= AT91C_MPDDRC_RDIV_DDR2_RZQ_50;
+	reg |= AT91C_MPDDRC_TZQIO_5;	/* @ 170 & 176 MHz */
+	reg |= AT91C_MPDDRC_EN_CALIB;
+
+	writel(reg, (AT91C_BASE_MPDDRC + MPDDRC_IO_CALIBR));
+
+	/* DDRAM2 Controller initialize */
+	ddram_initialize(AT91C_BASE_MPDDRC, AT91C_BASE_DDRCS, &ddramc_reg);
+
+	ddramc_dump_regs(AT91C_BASE_MPDDRC);
+}
+#endif /* #ifdef CONFIG_DDR2 */
+
+#if defined(CONFIG_MATRIX)
+static int matrix_configure_slave(void)
+{
+	unsigned int ddr_port;
+	unsigned int ssr_setting, sasplit_setting, srtop_setting;
+
+	/*
+	 * Matrix 0 (H64MX)
+	 */
+
+	/*
+	 * 0: Bridge from H64MX to AXIMX
+	 * (Internal ROM, Crypto Library, PKCC RAM): Always Secured
+	 */
+
+	/* 1: H64MX Peripheral Bridge */
+
+	/* 2: Video Decoder 1M: Non-Secure */
+	srtop_setting = MATRIX_SRTOP(0, MATRIX_SRTOP_VALUE_1M);
+	sasplit_setting = MATRIX_SASPLIT(0, MATRIX_SASPLIT_VALUE_1M);
+	ssr_setting = (MATRIX_LANSECH_NS(0)
+			| MATRIX_RDNSECH_NS(0)
+			| MATRIX_WRNSECH_NS(0));
+	matrix_configure_slave_security(AT91C_BASE_MATRIX64,
+					H64MX_SLAVE_VIDEO_DECODER,
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+
+	/* 4 ~ 10 DDR2 Port1 ~ 7: Non-Secure */
+	srtop_setting = MATRIX_SRTOP(0, MATRIX_SRTOP_VALUE_128M);
+	sasplit_setting = (MATRIX_SASPLIT(0, MATRIX_SASPLIT_VALUE_128M)
+				| MATRIX_SASPLIT(1, MATRIX_SASPLIT_VALUE_128M)
+				| MATRIX_SASPLIT(2, MATRIX_SASPLIT_VALUE_128M)
+				| MATRIX_SASPLIT(3, MATRIX_SASPLIT_VALUE_128M));
+	ssr_setting = (MATRIX_LANSECH_NS(0)
+			| MATRIX_LANSECH_NS(1)
+			| MATRIX_LANSECH_NS(2)
+			| MATRIX_LANSECH_NS(3)
+			| MATRIX_RDNSECH_NS(0)
+			| MATRIX_RDNSECH_NS(1)
+			| MATRIX_RDNSECH_NS(2)
+			| MATRIX_RDNSECH_NS(3)
+			| MATRIX_WRNSECH_NS(0)
+			| MATRIX_WRNSECH_NS(1)
+			| MATRIX_WRNSECH_NS(2)
+			| MATRIX_WRNSECH_NS(3));
+	/* DDR port 0 not used from NWd */
+	for (ddr_port = 1; ddr_port < 8; ddr_port++) {
+		matrix_configure_slave_security(AT91C_BASE_MATRIX64,
+					(H64MX_SLAVE_DDR2_PORT_0 + ddr_port),
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+	}
+
+	/*
+	 * 11: Internal SRAM 128K
+	 * TOP0 is set to 128K
+	 * SPLIT0 is set to 64K
+	 * LANSECH0 is set to 0, the low area of region 0 is the Securable one
+	 * RDNSECH0 is set to 0, region 0 Securable area is secured for reads.
+	 * WRNSECH0 is set to 0, region 0 Securable area is secured for writes
+	 */
+	srtop_setting = MATRIX_SRTOP(0, MATRIX_SRTOP_VALUE_128K);
+	sasplit_setting = MATRIX_SASPLIT(0, MATRIX_SASPLIT_VALUE_64K);
+	ssr_setting = (MATRIX_LANSECH_S(0)
+			| MATRIX_RDNSECH_S(0)
+			| MATRIX_WRNSECH_S(0));
+	matrix_configure_slave_security(AT91C_BASE_MATRIX64,
+					H64MX_SLAVE_INTERNAL_SRAM,
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+
+	/* 12:  Bridge from H64MX to H32MX */
+
+	/*
+	 * Matrix 1 (H32MX)
+	 */
+
+	/* 0: Bridge from H32MX to H64MX: Not Secured */
+
+	/* 1: H32MX Peripheral Bridge 0: Not Secured */
+
+	/* 2: H32MX Peripheral Bridge 1: Not Secured */
+
+	/*
+	 * 3: External Bus Interface
+	 * EBI CS0 Memory(256M) ----> Slave Region 0, 1
+	 * EBI CS1 Memory(256M) ----> Slave Region 2, 3
+	 * EBI CS2 Memory(256M) ----> Slave Region 4, 5
+	 * EBI CS3 Memory(128M) ----> Slave Region 6
+	 * NFC Command Registers(128M) -->Slave Region 7
+	 *
+	 * NANDFlash(EBI CS3) --> Slave Region 6: Non-Secure
+	 */
+	srtop_setting =	MATRIX_SRTOP(6, MATRIX_SRTOP_VALUE_128M);
+	srtop_setting |= MATRIX_SRTOP(7, MATRIX_SRTOP_VALUE_128M);
+	sasplit_setting = MATRIX_SASPLIT(6, MATRIX_SASPLIT_VALUE_128M);
+	sasplit_setting |= MATRIX_SASPLIT(7, MATRIX_SASPLIT_VALUE_128M);
+	ssr_setting = (MATRIX_LANSECH_NS(6)
+			| MATRIX_RDNSECH_NS(6)
+			| MATRIX_WRNSECH_NS(6));
+	ssr_setting |= (MATRIX_LANSECH_NS(7)
+			| MATRIX_RDNSECH_NS(7)
+			| MATRIX_WRNSECH_NS(7));
+	matrix_configure_slave_security(AT91C_BASE_MATRIX32,
+					H32MX_EXTERNAL_EBI,
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+
+	/* 4: NFC SRAM (4K): Non-Secure */
+	srtop_setting = MATRIX_SRTOP(0, MATRIX_SRTOP_VALUE_8K);
+	sasplit_setting = MATRIX_SASPLIT(0, MATRIX_SASPLIT_VALUE_8K);
+	ssr_setting = (MATRIX_LANSECH_NS(0)
+			| MATRIX_RDNSECH_NS(0)
+			| MATRIX_WRNSECH_NS(0));
+	matrix_configure_slave_security(AT91C_BASE_MATRIX32,
+					H32MX_NFC_SRAM,
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+
+	/* 5:
+	 * USB Device High Speed Dual Port RAM (DPR): 1M
+	 * USB Host OHCI registers: 1M
+	 * USB Host EHCI registers: 1M
+	 */
+	srtop_setting = (MATRIX_SRTOP(0, MATRIX_SRTOP_VALUE_1M)
+			| MATRIX_SRTOP(1, MATRIX_SRTOP_VALUE_1M)
+			| MATRIX_SRTOP(2, MATRIX_SRTOP_VALUE_1M));
+	sasplit_setting = (MATRIX_SASPLIT(0, MATRIX_SASPLIT_VALUE_1M)
+			| MATRIX_SASPLIT(1, MATRIX_SASPLIT_VALUE_1M)
+			| MATRIX_SASPLIT(2, MATRIX_SASPLIT_VALUE_1M));
+	ssr_setting = (MATRIX_LANSECH_NS(0)
+			| MATRIX_LANSECH_NS(1)
+			| MATRIX_LANSECH_NS(2)
+			| MATRIX_RDNSECH_NS(0)
+			| MATRIX_RDNSECH_NS(1)
+			| MATRIX_RDNSECH_NS(2)
+			| MATRIX_WRNSECH_NS(0)
+			| MATRIX_WRNSECH_NS(1)
+			| MATRIX_WRNSECH_NS(2));
+	matrix_configure_slave_security(AT91C_BASE_MATRIX32,
+					H32MX_USB,
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+
+	/* 6: Soft Modem (1M): Non-Secure */
+	srtop_setting = MATRIX_SRTOP(0, MATRIX_SRTOP_VALUE_1M);
+	sasplit_setting = MATRIX_SASPLIT(0, MATRIX_SASPLIT_VALUE_1M);
+	ssr_setting = (MATRIX_LANSECH_NS(0)
+			| MATRIX_RDNSECH_NS(0)
+			| MATRIX_WRNSECH_NS(0));
+	matrix_configure_slave_security(AT91C_BASE_MATRIX32,
+					H32MX_SMD,
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+	return 0;
+}
+
+static unsigned int security_ps_peri_id[] = {
+	AT91C_ID_VDEC,
+	AT91C_ID_PIOA,
+	AT91C_ID_PIOB,
+	AT91C_ID_PIOC,
+	AT91C_ID_PIOE,
+	AT91C_ID_USART2,
+	AT91C_ID_USART3,
+	AT91C_ID_USART4,
+	AT91C_ID_TWI0,
+	AT91C_ID_TWI2,
+	AT91C_ID_HSMC,
+	AT91C_ID_HSMCI0,
+	AT91C_ID_HSMCI1,
+	AT91C_ID_TC0,
+	AT91C_ID_TC1,
+	AT91C_ID_ADC,
+	AT91C_ID_UHPHS,
+	AT91C_ID_UDPHS,
+	AT91C_ID_LCDC,
+	AT91C_ID_ISI,
+	AT91C_ID_GMAC,
+	AT91C_ID_GMAC1,
+	AT91C_ID_SPI0,
+	AT91C_ID_SPI1,
+	AT91C_ID_SMD,
+	AT91C_ID_SSC0,
+	AT91C_ID_SSC1,
+};
+
+static int matrix_config_periheral(void)
+{
+	unsigned int *peri_id = security_ps_peri_id;
+	unsigned int array_size = sizeof(security_ps_peri_id) / sizeof(unsigned int);
+	int ret;
+
+	ret = matrix_configure_peri_security(peri_id, array_size);
+	if (ret)
+		return -1;
+
+	return 0;
+}
+
+static int matrix_init(void)
+{
+	int ret;
+
+	matrix_write_protect_disable(AT91C_BASE_MATRIX64);
+	matrix_write_protect_disable(AT91C_BASE_MATRIX32);
+
+	ret = matrix_configure_slave();
+	if (ret)
+		return -1;
+
+	ret = matrix_config_periheral();
+	if (ret)
+		return -1;
+
+	return 0;
+}
+#endif	/* #if defined(CONFIG_MATRIX) */
+
+#if defined(CONFIG_TWI)
+unsigned int at91_twi0_hw_init(void)
+{
+	unsigned int base_addr = AT91C_BASE_TWI0;
+
+	const struct pio_desc twi_pins[] = {
+		{"TWD0", AT91C_PIN_PA(30), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"TWCK0", AT91C_PIN_PA(31), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	pmc_enable_periph_clock(AT91C_ID_PIOA);
+	pio_configure(twi_pins);
+
+	pmc_enable_periph_clock(AT91C_ID_TWI0);
+
+	return base_addr;
+}
+
+unsigned int at91_twi1_hw_init(void)
+{
+	return 0;
+}
+
+unsigned int at91_twi2_hw_init(void)
+{
+	unsigned int base_addr = AT91C_BASE_TWI2;
+
+	const struct pio_desc twi_pins[] = {
+		{"TWD2", AT91C_PIN_PB(29), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"TWCK2", AT91C_PIN_PB(30), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	pmc_enable_periph_clock(AT91C_ID_PIOB);
+	pio_configure(twi_pins);
+
+	pmc_enable_periph_clock(AT91C_ID_TWI2);
+
+	return base_addr;
+}
+
+unsigned int at91_twi3_hw_init(void)
+{
+	unsigned int base_addr = AT91C_BASE_TWI3;
+
+	const struct pio_desc twi_pins[] = {
+		{"TWD3", AT91C_PIN_PC(25), 0, PIO_DEFAULT, PIO_PERIPH_B},
+		{"TWCK3", AT91C_PIN_PC(26), 0, PIO_DEFAULT, PIO_PERIPH_B},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	pmc_enable_periph_clock(AT91C_ID_PIOC);
+	pio_configure(twi_pins);
+
+	pmc_enable_periph_clock(AT91C_ID_TWI3);
+
+	return base_addr;
+}
+#endif
+
+#if defined(CONFIG_AUTOCONFIG_TWI_BUS)
+void at91_board_config_twi_bus(void)
+{
+	at24xx_twi_bus = 0;
+
+	attiny_twi_bus = 2;
+
+	act8865_twi_bus = 3;
+}
+#endif
+
+#if defined(CONFIG_ACT8865_SET_VOLTAGE)
+int at91_board_act8865_set_reg_voltage(void)
+{
+	unsigned char reg, value;
+	int ret;
+
+	/* Check ACT8865 I2C interface */
+	if (act8865_check_i2c_disabled())
+		return 0;
+
+	/* Enable REG5 output 3.3V */
+	reg = REG5_0;
+	value = ACT8865_3V3;
+	ret = act8865_set_reg_voltage(reg, value);
+	if (ret)
+		console_printf("ACT8865: Failed to make REG5 output 3300mV\n");
+
+	/* Enable REG6 output 1.8V */
+	reg = REG6_0;
+	value = ACT8865_1V8;
+	ret = act8865_set_reg_voltage(reg, value);
+	if (ret)
+		console_printf("ACT8865: Failed to make REG6 output 1800mV\n");
+
+	return 0;
+}
+#endif
+
+#if defined(CONFIG_PM)
+void at91_disable_smd_clock(void)
+{
+	/*
+	 * set pin DIBP to pull-up and DIBN to pull-down
+	 * to save power on VDDIOP0
+	 */
+	pmc_enable_system_clock(AT91C_PMC_SMDCK);
+	pmc_set_smd_clock_divider(AT91C_PMC_SMDDIV);
+	pmc_enable_periph_clock(AT91C_ID_SMD);
+	writel(0xF, (0x0C + AT91C_BASE_SMD));
+	pmc_disable_periph_clock(AT91C_ID_SMD);
+	pmc_disable_system_clock(AT91C_PMC_SMDCK);
+}
+#endif
+
+#if defined(CONFIG_MAC0_PHY)
+unsigned int at91_eth0_hw_init(void)
+{
+	unsigned int base_addr = AT91C_BASE_GMAC;
+
+	const struct pio_desc macb_pins[] = {
+		{"G0_MDC",	AT91C_PIN_PB(16), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"G0_MDIO",	AT91C_PIN_PB(17), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	pio_configure(macb_pins);
+	pmc_enable_periph_clock(AT91C_ID_PIOB);
+
+	pmc_enable_periph_clock(AT91C_ID_GMAC);
+
+	return base_addr;
+}
+#endif
+
+#if defined(CONFIG_MACB)
+void at91_disable_mac_clock(void)
+{
+#if defined(CONFIG_MAC0_PHY)
+	pmc_disable_periph_clock(AT91C_ID_GMAC);
+#endif
+}
+#endif
+
+#ifdef CONFIG_HW_INIT
+void hw_init(void)
+{
+	/* Disable watchdog */
+	at91_disable_wdt();
+
+	/* At this stage the main oscillator is supposed
+	 * to be enabled PCK = MCK = MOSC
+	 */
+
+	/* Switch PCK/MCK on Main clock output */
+	pmc_cfg_mck(BOARD_PRESCALER_MAIN_CLOCK);
+
+	/* Configure PLLA = MOSC * (PLL_MULA + 1) / PLL_DIVA */
+	pmc_cfg_plla(PLLA_SETTINGS);
+
+	/* Initialize PLLA charge pump */
+	/* not needed for SAMA5D4 */
+	pmc_init_pll(0);
+
+	/* Switch MCK on PLLA output */
+	pmc_cfg_mck(BOARD_PRESCALER_PLLA);
+
+	/* Enable External Reset */
+	writel(AT91C_RSTC_KEY_UNLOCK | AT91C_RSTC_URSTEN,
+					AT91C_BASE_RSTC + RSTC_RMR);
+
+#if defined(CONFIG_ENTER_NWD)
+	cpacr_init();
+
+	/* Program the DACR to allow client access to *all* domains */
+	dacr_swd_init();
+#endif
+
+#if defined(CONFIG_MATRIX)
+	/* Initialize the matrix */
+	matrix_init();
+#endif
+
+	/* initialize the dbgu */
+	initialize_dbgu();
+
+#if defined(CONFIG_MATRIX)
+	matrix_read_slave_security();
+	matrix_read_periperal_security();
+#endif
+
+	/* Init timer */
+	timer_init();
+
+#ifdef CONFIG_DDR2
+	/* Initialize MPDDR Controller */
+	ddramc_init();
+#endif
+
+	/* Prepare L2 cache setup */
+	l2cache_prepare();
+
+#if defined(CONFIG_TWI)
+	twi_init();
+#endif
+
+	// init PIOB IOs
+	const struct pio_desc piob_pins[] = {
+		{"G0_TXCK", AT91C_PIN_PB(0), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_TXEN", AT91C_PIN_PB(2), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_RXDV", AT91C_PIN_PB(6), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_RXER", AT91C_PIN_PB(7), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_RXD0", AT91C_PIN_PB(8), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_RXD1", AT91C_PIN_PB(9), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_TXD0", AT91C_PIN_PB(12), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_TXD1", AT91C_PIN_PB(13), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_MDC", AT91C_PIN_PB(16), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_MDIO", AT91C_PIN_PB(17), 0, PIO_DEFAULT, PIO_INPUT},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure the PIO controller */
+	pio_configure(piob_pins);
+
+	// init PIOE IOs
+	const struct pio_desc pioe_pins[] = {
+		{"G0_IRQ", AT91C_PIN_PE(0), 0, PIO_DEFAULT, PIO_INPUT},
+		{"MCI1_CD", AT91C_PIN_PE(3), 0, PIO_DEFAULT, PIO_INPUT},
+		{"CTS3", AT91C_PIN_PE(5), 0, PIO_DEFAULT, PIO_INPUT},
+		{"PMIC_IRQ", AT91C_PIN_PE(25), 0, PIO_DEFAULT, PIO_INPUT},
+		{"USB_SENSE", AT91C_PIN_PE(31), 0, PIO_DEFAULT, PIO_INPUT},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure the PIO controller */
+	pio_configure(pioe_pins);
+
+	pmc_enable_periph_clock(AT91C_ID_PIOB);
+	pmc_enable_periph_clock(AT91C_ID_PIOE);
+}
+#endif /* #ifdef CONFIG_HW_INIT */
+
+#ifdef CONFIG_SDCARD
+#ifdef CONFIG_OF_LIBFDT
+void at91_board_set_dtb_name(char *of_name)
+{
+	strcpy(of_name, "lorix_one_256.dtb");
+}
+#endif
+
+void at91_mci0_hw_init(void)
+{
+	const struct pio_desc mci_pins[] = {
+		{"MCI1_CK", AT91C_PIN_PE(18), 0, PIO_DEFAULT, PIO_PERIPH_C},
+		{"MCI1_CDA", AT91C_PIN_PE(19), 0, PIO_DEFAULT, PIO_PERIPH_C},
+
+		{"MCI1_DA0", AT91C_PIN_PE(20), 0, PIO_DEFAULT, PIO_PERIPH_C},
+		{"MCI1_DA1", AT91C_PIN_PE(21), 0, PIO_DEFAULT, PIO_PERIPH_C},
+		{"MCI1_DA2", AT91C_PIN_PE(22), 0, PIO_DEFAULT, PIO_PERIPH_C},
+		{"MCI1_DA3", AT91C_PIN_PE(23), 0, PIO_DEFAULT, PIO_PERIPH_C},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure the PIO controller */
+	pio_configure(mci_pins);
+	pmc_enable_periph_clock(AT91C_ID_PIOE);
+	pmc_enable_periph_clock(AT91C_ID_HSMCI1);
+}
+#endif /* #ifdef CONFIG_SDCARD */
+
+#ifdef CONFIG_NANDFLASH
+void nandflash_hw_init(void)
+{
+	/* Configure nand pins */
+	const struct pio_desc nand_pins[] = {
+		{"NANDOE",	CONFIG_SYS_NAND_OE_PIN,
+					0, PIO_PULLUP, PIO_PERIPH_A},
+		{"NANDWE",	CONFIG_SYS_NAND_WE_PIN,
+					0, PIO_PULLUP, PIO_PERIPH_A},
+		{"NANDALE",	CONFIG_SYS_NAND_ALE_PIN,
+					0, PIO_PULLUP, PIO_PERIPH_A},
+		{"NANDCLE",	CONFIG_SYS_NAND_CLE_PIN,
+					0, PIO_PULLUP, PIO_PERIPH_A},
+		{"NANDCS",	CONFIG_SYS_NAND_ENABLE_PIN,
+					1, PIO_DEFAULT, PIO_OUTPUT},
+		{"D0",	AT91C_PIN_PC(5), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D1",	AT91C_PIN_PC(6), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D2",	AT91C_PIN_PC(7), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D3",	AT91C_PIN_PC(8), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D4",	AT91C_PIN_PC(9), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D5",	AT91C_PIN_PC(10), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D6",	AT91C_PIN_PC(11), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D7",	AT91C_PIN_PC(12), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure the nand controller pins*/
+	pio_configure(nand_pins);
+	pmc_enable_periph_clock(AT91C_ID_PIOC);
+
+	/* Enable the clock */
+	pmc_enable_periph_clock(AT91C_ID_HSMC);
+
+	/* EBI Configuration Register */
+	writel((AT91C_EBICFG_DRIVE0_HIGH
+		| AT91C_EBICFG_PULL0_NONE
+		| AT91C_EBICFG_DRIVE1_HIGH
+		| AT91C_EBICFG_PULL1_NONE), SFR_EBICFG + AT91C_BASE_SFR);
+
+	/* Configure SMC CS3 for NAND/SmartMedia */
+	writel(AT91C_SMC_SETUP_NWE(1)
+		| AT91C_SMC_SETUP_NCS_WR(1)
+		| AT91C_SMC_SETUP_NRD(1)
+		| AT91C_SMC_SETUP_NCS_RD(1),
+		(ATMEL_BASE_SMC + SMC_SETUP3));
+
+	writel(AT91C_SMC_PULSE_NWE(2)
+		| AT91C_SMC_PULSE_NCS_WR(3)
+		| AT91C_SMC_PULSE_NRD(2)
+		| AT91C_SMC_PULSE_NCS_RD(3),
+		(ATMEL_BASE_SMC + SMC_PULSE3));
+
+	writel(AT91C_SMC_CYCLE_NWE(5)
+		| AT91C_SMC_CYCLE_NRD(5),
+		(ATMEL_BASE_SMC + SMC_CYCLE3));
+
+	writel(AT91C_SMC_TIMINGS_TCLR(2)
+		| AT91C_SMC_TIMINGS_TADL(7)
+		| AT91C_SMC_TIMINGS_TAR(2)
+		| AT91C_SMC_TIMINGS_TRR(3)
+		| AT91C_SMC_TIMINGS_TWB(7)
+		| AT91C_SMC_TIMINGS_RBNSEL(2)
+		| AT91C_SMC_TIMINGS_NFSEL,
+		(ATMEL_BASE_SMC + SMC_TIMINGS3));
+
+	writel(AT91C_SMC_MODE_READMODE_NRD_CTRL
+		| AT91C_SMC_MODE_WRITEMODE_NWE_CTRL
+		| AT91C_SMC_MODE_DBW_8
+		| AT91C_SMC_MODE_TDF_CYCLES(1),
+		(ATMEL_BASE_SMC + SMC_MODE3));
+}
+#endif /* #ifdef CONFIG_NANDFLASH */
+
+#if defined(CONFIG_TWI)
+void twi_init()
+{
+	twi_bus_init(at91_twi0_hw_init);
+	twi_bus_init(at91_twi1_hw_init);
+	twi_bus_init(at91_twi2_hw_init);
+	twi_bus_init(at91_twi3_hw_init);
+#if defined(CONFIG_AUTOCONFIG_TWI_BUS)
+	dbg_loud("Auto-Config the TWI Bus by the board\n");
+	at91_board_config_twi_bus();
+#endif
+}
+#endif
diff --git a/contrib/board/wifx/lorix_one_256/lorix_one_256.h b/contrib/board/wifx/lorix_one_256/lorix_one_256.h
new file mode 100644
index 0000000..c35f716
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_256/lorix_one_256.h
@@ -0,0 +1,97 @@
+/* ----------------------------------------------------------------------------
+ *         ATMEL Microcontroller Software Support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2014, Atmel Corporation
+ * Copyright (c) 2016-2020, Wifx SÃ rl
+ *                          Yannick Lanz <yannick.lanz@wifx.net>
+ *
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the disclaimer below.
+ *
+ * Atmel's name may not be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef __LORIX_ONE_256_H__
+#define __LORIX_ONE_256_H__
+
+/*
+ * PMC Setting
+ *
+ * The main oscillator is enabled as soon as possible in the lowlevel_clock_init
+ * and MCK is switched on the main oscillator.
+ */
+#define BOARD_MAINOSC		12000000
+
+#if defined(CONFIG_CPU_CLK_600MHZ)
+
+/* PCK: 600MHz, MCK: 200MHz */
+#define BOARD_PLLA_MULA		99
+
+#define BOARD_PCK		((unsigned long)((BOARD_MAINOSC * (BOARD_PLLA_MULA + 1)) / 2))
+#define BOARD_MCK		((unsigned long)((BOARD_MAINOSC * (BOARD_PLLA_MULA + 1)) / 2 / 3))
+
+#define BOARD_CKGR_PLLA		(AT91C_CKGR_SRCA | AT91C_CKGR_OUTA_0)
+#define BOARD_PLLACOUNT		(0x3F << 8)
+#define BOARD_MULA		((AT91C_CKGR_MULA << 2) & (BOARD_PLLA_MULA << 18))
+#define BOARD_DIVA		(AT91C_CKGR_DIVA & 1)
+
+/* Master Clock Register */
+#define BOARD_PRESCALER_MAIN_CLOCK	(AT91C_PMC_PLLADIV2_2 \
+					| AT91C_PMC_MDIV_3 \
+					| AT91C_PMC_CSS_MAIN_CLK)
+
+#define BOARD_PRESCALER_PLLA		(AT91C_PMC_H32MXDIV_H32MXDIV2 \
+					| AT91C_PMC_PLLADIV2_2 \
+					| AT91C_PMC_MDIV_3 \
+					| AT91C_PMC_CSS_PLLA_CLK)
+
+#define MASTER_CLOCK		200000000
+
+#else
+#error "No CLK setting defined"
+#endif
+
+#define PLLA_SETTINGS		(BOARD_CKGR_PLLA | \
+				BOARD_PLLACOUNT | \
+				BOARD_MULA | \
+				BOARD_DIVA)
+
+#define	USART_BASE	AT91C_BASE_USART3
+
+/*
+ * NandFlash Settings
+ */
+#define CONFIG_SYS_NAND_BASE			AT91C_BASE_CS3
+#define CONFIG_SYS_NAND_MASK_ALE		(1 << 21)
+#define CONFIG_SYS_NAND_MASK_CLE		(1 << 22)
+
+#define CONFIG_SYS_NAND_OE_PIN			AT91C_PIN_PC(13)
+#define CONFIG_SYS_NAND_WE_PIN			AT91C_PIN_PC(14)
+#define CONFIG_SYS_NAND_ALE_PIN			AT91C_PIN_PC(17)
+#define CONFIG_SYS_NAND_CLE_PIN			AT91C_PIN_PC(18)
+#define CONFIG_SYS_NAND_ENABLE_PIN		AT91C_PIN_PC(15)
+
+#define	NO_GALOIS_TABLE_IN_ROM
+
+/*
+ * MCI Settings
+ */
+#define CONFIG_SYS_BASE_MCI	AT91C_BASE_HSMCI1
+
+#endif /* __LORIX_ONE_256_H__ */
diff --git a/contrib/board/wifx/lorix_one_256/lorix_one_256_nf_uboot_defconfig b/contrib/board/wifx/lorix_one_256/lorix_one_256_nf_uboot_defconfig
new file mode 100644
index 0000000..e06e5bc
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_256/lorix_one_256_nf_uboot_defconfig
@@ -0,0 +1,9 @@
+CONFIG_LORIX_ONE_256=y
+CONFIG_CPU_CLK_600MHZ=y
+CONFIG_RAM_128MB=y
+CONFIG_IMG_SIZE="0x000C0000"
+CONFIG_DEBUG=y
+# CONFIG_DISABLE_WATCHDOG is not set
+# CONFIG_ENTER_NWD is not set
+CONFIG_ACT8865_SET_VOLTAGE=y
+# CONFIG_DISABLE_ACT8865_I2C is not set
diff --git a/contrib/board/wifx/lorix_one_256/lorix_one_256_sd_uboot_defconfig b/contrib/board/wifx/lorix_one_256/lorix_one_256_sd_uboot_defconfig
new file mode 100644
index 0000000..225c32d
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_256/lorix_one_256_sd_uboot_defconfig
@@ -0,0 +1,9 @@
+CONFIG_LORIX_ONE_256=y
+CONFIG_CPU_CLK_600MHZ=y
+CONFIG_RAM_128MB=y
+CONFIG_SDCARD=y
+CONFIG_DEBUG=y
+# CONFIG_DISABLE_WATCHDOG is not set
+# CONFIG_ENTER_NWD is not set
+CONFIG_ACT8865_SET_VOLTAGE=y
+# CONFIG_DISABLE_ACT8865_I2C is not set
diff --git a/contrib/board/wifx/lorix_one_512/Config.in.board b/contrib/board/wifx/lorix_one_512/Config.in.board
new file mode 100644
index 0000000..f1b7062
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_512/Config.in.board
@@ -0,0 +1,16 @@
+config CONFIG_LORIX_ONE_512
+	bool "lorix_one_512"
+	select SAMA5D4
+	select CONFIG_CPU_V7
+	select CONFIG_DDRC
+	select ALLOW_NANDFLASH
+	select ALLOW_SDCARD
+	select ALLOW_CPU_CLK_600MHZ
+	select ALLOW_CRYSTAL_12_000MHZ
+	select CONFIG_HAS_EEPROM
+	select CONFIG_HAS_PMIC_ACT8865
+	select CONFIG_SUPPORT_PM
+	select CONFIG_HAS_EHT0_PHY
+	select SUPPORT_BUS_SPEED_200MHZ
+	help
+	  Use the LORIX One LoRa gateway board (512MB NAND version)
diff --git a/contrib/board/wifx/lorix_one_512/Config.in.boardname b/contrib/board/wifx/lorix_one_512/Config.in.boardname
new file mode 100644
index 0000000..f9090f5
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_512/Config.in.boardname
@@ -0,0 +1,2 @@
+config CONFIG_BOARDNAME
+	default "lorix_one_512" if CONFIG_LORIX_ONE_512
diff --git a/contrib/board/wifx/lorix_one_512/Config.in.linux_arg b/contrib/board/wifx/lorix_one_512/Config.in.linux_arg
new file mode 100644
index 0000000..6af3f2c
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_512/Config.in.linux_arg
@@ -0,0 +1,3 @@
+config CONFIG_LINUX_KERNEL_ARG_STRING
+	default "console=ttyS0,115200 mtdparts=atmel_nand:8M(bootstrap/kernel)ro,-(rootfs) rw rootfstype=ubifs ubi.mtd=1 root=ubi0:rootfs" if CONFIG_LORIX_ONE_512 && !CONFIG_SDCARD
+	default "console=ttyS0,115200 root=/dev/mmcblk0p2 rootdelay=2" if CONFIG_LORIX_ONE_512 && CONFIG_SDCARD
diff --git a/contrib/board/wifx/lorix_one_512/board.mk b/contrib/board/wifx/lorix_one_512/board.mk
new file mode 100644
index 0000000..e549285
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_512/board.mk
@@ -0,0 +1,2 @@
+CPPFLAGS += -DCONFIG_LORIX_ONE_512
+ASFLAGS += -DCONFIG_LORIX_ONE_512
diff --git a/contrib/board/wifx/lorix_one_512/lorix_one_512.c b/contrib/board/wifx/lorix_one_512/lorix_one_512.c
new file mode 100644
index 0000000..191d09c
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_512/lorix_one_512.c
@@ -0,0 +1,745 @@
+/* ----------------------------------------------------------------------------
+ *         ATMEL Microcontroller Software Support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2014, Atmel Corporation
+ * Copyright (c) 2016-2020, Wifx SÃ rl
+ *                          Yannick Lanz <yannick.lanz@wifx.net>
+ *
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the disclaimer below.
+ *
+ * Atmel's name may not be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#include "common.h"
+#include "hardware.h"
+#include "pmc.h"
+#include "usart.h"
+#include "debug.h"
+#include "ddramc.h"
+#include "gpio.h"
+#include "timer.h"
+#include "watchdog.h"
+#include "string.h"
+
+#include "arch/at91_pmc/pmc.h"
+#include "arch/at91_rstc.h"
+#include "arch/sama5_smc.h"
+#include "arch/at91_pio.h"
+#include "arch/at91_ddrsdrc.h"
+#include "arch/at91_sfr.h"
+#include "arch/tz_matrix.h"
+#include "lorix_one_512.h"
+#include "tz_utils.h"
+#include "l2cc.h"
+#include "matrix.h"
+#include "act8865.h"
+#include "twi.h"
+
+static void at91_dbgu_hw_init(void)
+{
+	const struct pio_desc dbgu_pins[] = {
+		{"RXD", AT91C_PIN_PE(16), 0, PIO_DEFAULT, PIO_PERIPH_B},
+		{"TXD", AT91C_PIN_PE(17), 0, PIO_DEFAULT, PIO_PERIPH_B},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	pio_configure(dbgu_pins);
+	pmc_enable_periph_clock(AT91C_ID_PIOE);
+	pmc_enable_periph_clock(AT91C_ID_USART3);
+}
+
+static void initialize_dbgu(void)
+{
+	unsigned int baudrate = 115200;
+
+	at91_dbgu_hw_init();
+
+	if (pmc_check_mck_h32mxdiv())
+		usart_init(BAUDRATE(MASTER_CLOCK / 2, baudrate));
+	else
+		usart_init(BAUDRATE(MASTER_CLOCK, baudrate));
+}
+
+#ifdef CONFIG_DDR2
+static void ddramc_reg_config(struct ddramc_register *ddramc_config)
+{
+	ddramc_config->mdr = (AT91C_DDRC2_DBW_16_BITS
+				| AT91C_DDRC2_MD_DDR2_SDRAM);
+
+	ddramc_config->cr = (AT91C_DDRC2_NC_DDR10_SDR9
+				| AT91C_DDRC2_NR_13
+				| AT91C_DDRC2_CAS_5
+				| AT91C_DDRC2_DISABLE_RESET_DLL
+				| AT91C_DDRC2_ENABLE_DLL
+				| AT91C_DDRC2_NB_BANKS_8
+				| AT91C_DDRC2_DECOD_INTERLEAVED
+				| AT91C_DDRC2_UNAL_SUPPORTED);
+
+#if defined(CONFIG_BUS_SPEED_200MHZ)
+
+	ddramc_config->rtr = 0x61B;
+
+	ddramc_config->t0pr = (AT91C_DDRC2_TRAS_(9)
+			| AT91C_DDRC2_TRCD_(3)
+			| AT91C_DDRC2_TWR_(3)
+			| AT91C_DDRC2_TRC_(12)
+			| AT91C_DDRC2_TRP_(3)
+			| AT91C_DDRC2_TRRD_(2)
+			| AT91C_DDRC2_TWTR_(2)
+			| AT91C_DDRC2_TMRD_(2));
+
+	ddramc_config->t1pr = (AT91C_DDRC2_TXP_(2)
+			| AT91C_DDRC2_TXSRD_(200)
+			| AT91C_DDRC2_TXSNR_(28)
+			| AT91C_DDRC2_TRFC_(26));
+
+	ddramc_config->t2pr = (AT91C_DDRC2_TFAW_(9)
+			| AT91C_DDRC2_TRTP_(2)
+			| AT91C_DDRC2_TRPA_(3)
+			| AT91C_DDRC2_TXARDS_(8)
+			| AT91C_DDRC2_TXARD_(2));
+
+#else
+#error "No CLK setting defined"
+#endif
+}
+
+static void ddramc_init(void)
+{
+	struct ddramc_register ddramc_reg;
+	unsigned int reg;
+
+	ddramc_reg_config(&ddramc_reg);
+
+	/* enable ddr2 clock */
+	pmc_enable_periph_clock(AT91C_ID_MPDDRC);
+	pmc_enable_system_clock(AT91C_PMC_DDR);
+
+	/* configure Shift Sampling Point of Data */
+#if defined(CONFIG_BUS_SPEED_200MHZ)
+	reg = AT91C_MPDDRC_RD_DATA_PATH_TWO_CYCLES;
+#else
+	reg = AT91C_MPDDRC_RD_DATA_PATH_ONE_CYCLES;
+#endif
+	writel(reg, (AT91C_BASE_MPDDRC + MPDDRC_RD_DATA_PATH));
+
+	/* MPDDRC I/O Calibration Register */
+	reg = readl(AT91C_BASE_MPDDRC + MPDDRC_IO_CALIBR);
+	reg &= ~AT91C_MPDDRC_RDIV;
+	reg &= ~AT91C_MPDDRC_TZQIO;
+	reg &= ~AT91C_MPDDRC_CALCODEP;
+	reg &= ~AT91C_MPDDRC_CALCODEN;
+	reg |= AT91C_MPDDRC_RDIV_DDR2_RZQ_50;
+	reg |= AT91C_MPDDRC_TZQIO_5;	/* @ 170 & 176 MHz */
+	reg |= AT91C_MPDDRC_EN_CALIB;
+
+	writel(reg, (AT91C_BASE_MPDDRC + MPDDRC_IO_CALIBR));
+
+	/* DDRAM2 Controller initialize */
+	ddram_initialize(AT91C_BASE_MPDDRC, AT91C_BASE_DDRCS, &ddramc_reg);
+
+	ddramc_dump_regs(AT91C_BASE_MPDDRC);
+}
+#endif /* #ifdef CONFIG_DDR2 */
+
+#if defined(CONFIG_MATRIX)
+static int matrix_configure_slave(void)
+{
+	unsigned int ddr_port;
+	unsigned int ssr_setting, sasplit_setting, srtop_setting;
+
+	/*
+	 * Matrix 0 (H64MX)
+	 */
+
+	/*
+	 * 0: Bridge from H64MX to AXIMX
+	 * (Internal ROM, Crypto Library, PKCC RAM): Always Secured
+	 */
+
+	/* 1: H64MX Peripheral Bridge */
+
+	/* 2: Video Decoder 1M: Non-Secure */
+	srtop_setting = MATRIX_SRTOP(0, MATRIX_SRTOP_VALUE_1M);
+	sasplit_setting = MATRIX_SASPLIT(0, MATRIX_SASPLIT_VALUE_1M);
+	ssr_setting = (MATRIX_LANSECH_NS(0)
+			| MATRIX_RDNSECH_NS(0)
+			| MATRIX_WRNSECH_NS(0));
+	matrix_configure_slave_security(AT91C_BASE_MATRIX64,
+					H64MX_SLAVE_VIDEO_DECODER,
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+
+	/* 4 ~ 10 DDR2 Port1 ~ 7: Non-Secure */
+	srtop_setting = MATRIX_SRTOP(0, MATRIX_SRTOP_VALUE_128M);
+	sasplit_setting = (MATRIX_SASPLIT(0, MATRIX_SASPLIT_VALUE_128M)
+				| MATRIX_SASPLIT(1, MATRIX_SASPLIT_VALUE_128M)
+				| MATRIX_SASPLIT(2, MATRIX_SASPLIT_VALUE_128M)
+				| MATRIX_SASPLIT(3, MATRIX_SASPLIT_VALUE_128M));
+	ssr_setting = (MATRIX_LANSECH_NS(0)
+			| MATRIX_LANSECH_NS(1)
+			| MATRIX_LANSECH_NS(2)
+			| MATRIX_LANSECH_NS(3)
+			| MATRIX_RDNSECH_NS(0)
+			| MATRIX_RDNSECH_NS(1)
+			| MATRIX_RDNSECH_NS(2)
+			| MATRIX_RDNSECH_NS(3)
+			| MATRIX_WRNSECH_NS(0)
+			| MATRIX_WRNSECH_NS(1)
+			| MATRIX_WRNSECH_NS(2)
+			| MATRIX_WRNSECH_NS(3));
+	/* DDR port 0 not used from NWd */
+	for (ddr_port = 1; ddr_port < 8; ddr_port++) {
+		matrix_configure_slave_security(AT91C_BASE_MATRIX64,
+					(H64MX_SLAVE_DDR2_PORT_0 + ddr_port),
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+	}
+
+	/*
+	 * 11: Internal SRAM 128K
+	 * TOP0 is set to 128K
+	 * SPLIT0 is set to 64K
+	 * LANSECH0 is set to 0, the low area of region 0 is the Securable one
+	 * RDNSECH0 is set to 0, region 0 Securable area is secured for reads.
+	 * WRNSECH0 is set to 0, region 0 Securable area is secured for writes
+	 */
+	srtop_setting = MATRIX_SRTOP(0, MATRIX_SRTOP_VALUE_128K);
+	sasplit_setting = MATRIX_SASPLIT(0, MATRIX_SASPLIT_VALUE_64K);
+	ssr_setting = (MATRIX_LANSECH_S(0)
+			| MATRIX_RDNSECH_S(0)
+			| MATRIX_WRNSECH_S(0));
+	matrix_configure_slave_security(AT91C_BASE_MATRIX64,
+					H64MX_SLAVE_INTERNAL_SRAM,
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+
+	/* 12:  Bridge from H64MX to H32MX */
+
+	/*
+	 * Matrix 1 (H32MX)
+	 */
+
+	/* 0: Bridge from H32MX to H64MX: Not Secured */
+
+	/* 1: H32MX Peripheral Bridge 0: Not Secured */
+
+	/* 2: H32MX Peripheral Bridge 1: Not Secured */
+
+	/*
+	 * 3: External Bus Interface
+	 * EBI CS0 Memory(256M) ----> Slave Region 0, 1
+	 * EBI CS1 Memory(256M) ----> Slave Region 2, 3
+	 * EBI CS2 Memory(256M) ----> Slave Region 4, 5
+	 * EBI CS3 Memory(128M) ----> Slave Region 6
+	 * NFC Command Registers(128M) -->Slave Region 7
+	 *
+	 * NANDFlash(EBI CS3) --> Slave Region 6: Non-Secure
+	 */
+	srtop_setting =	MATRIX_SRTOP(6, MATRIX_SRTOP_VALUE_128M);
+	srtop_setting |= MATRIX_SRTOP(7, MATRIX_SRTOP_VALUE_128M);
+	sasplit_setting = MATRIX_SASPLIT(6, MATRIX_SASPLIT_VALUE_128M);
+	sasplit_setting |= MATRIX_SASPLIT(7, MATRIX_SASPLIT_VALUE_128M);
+	ssr_setting = (MATRIX_LANSECH_NS(6)
+			| MATRIX_RDNSECH_NS(6)
+			| MATRIX_WRNSECH_NS(6));
+	ssr_setting |= (MATRIX_LANSECH_NS(7)
+			| MATRIX_RDNSECH_NS(7)
+			| MATRIX_WRNSECH_NS(7));
+	matrix_configure_slave_security(AT91C_BASE_MATRIX32,
+					H32MX_EXTERNAL_EBI,
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+
+	/* 4: NFC SRAM (4K): Non-Secure */
+	srtop_setting = MATRIX_SRTOP(0, MATRIX_SRTOP_VALUE_8K);
+	sasplit_setting = MATRIX_SASPLIT(0, MATRIX_SASPLIT_VALUE_8K);
+	ssr_setting = (MATRIX_LANSECH_NS(0)
+			| MATRIX_RDNSECH_NS(0)
+			| MATRIX_WRNSECH_NS(0));
+	matrix_configure_slave_security(AT91C_BASE_MATRIX32,
+					H32MX_NFC_SRAM,
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+
+	/* 5:
+	 * USB Device High Speed Dual Port RAM (DPR): 1M
+	 * USB Host OHCI registers: 1M
+	 * USB Host EHCI registers: 1M
+	 */
+	srtop_setting = (MATRIX_SRTOP(0, MATRIX_SRTOP_VALUE_1M)
+			| MATRIX_SRTOP(1, MATRIX_SRTOP_VALUE_1M)
+			| MATRIX_SRTOP(2, MATRIX_SRTOP_VALUE_1M));
+	sasplit_setting = (MATRIX_SASPLIT(0, MATRIX_SASPLIT_VALUE_1M)
+			| MATRIX_SASPLIT(1, MATRIX_SASPLIT_VALUE_1M)
+			| MATRIX_SASPLIT(2, MATRIX_SASPLIT_VALUE_1M));
+	ssr_setting = (MATRIX_LANSECH_NS(0)
+			| MATRIX_LANSECH_NS(1)
+			| MATRIX_LANSECH_NS(2)
+			| MATRIX_RDNSECH_NS(0)
+			| MATRIX_RDNSECH_NS(1)
+			| MATRIX_RDNSECH_NS(2)
+			| MATRIX_WRNSECH_NS(0)
+			| MATRIX_WRNSECH_NS(1)
+			| MATRIX_WRNSECH_NS(2));
+	matrix_configure_slave_security(AT91C_BASE_MATRIX32,
+					H32MX_USB,
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+
+	/* 6: Soft Modem (1M): Non-Secure */
+	srtop_setting = MATRIX_SRTOP(0, MATRIX_SRTOP_VALUE_1M);
+	sasplit_setting = MATRIX_SASPLIT(0, MATRIX_SASPLIT_VALUE_1M);
+	ssr_setting = (MATRIX_LANSECH_NS(0)
+			| MATRIX_RDNSECH_NS(0)
+			| MATRIX_WRNSECH_NS(0));
+	matrix_configure_slave_security(AT91C_BASE_MATRIX32,
+					H32MX_SMD,
+					srtop_setting,
+					sasplit_setting,
+					ssr_setting);
+	return 0;
+}
+
+static unsigned int security_ps_peri_id[] = {
+	AT91C_ID_VDEC,
+	AT91C_ID_PIOA,
+	AT91C_ID_PIOB,
+	AT91C_ID_PIOC,
+	AT91C_ID_PIOE,
+	AT91C_ID_USART2,
+	AT91C_ID_USART3,
+	AT91C_ID_USART4,
+	AT91C_ID_TWI0,
+	AT91C_ID_TWI2,
+	AT91C_ID_HSMC,
+	AT91C_ID_HSMCI0,
+	AT91C_ID_HSMCI1,
+	AT91C_ID_TC0,
+	AT91C_ID_TC1,
+	AT91C_ID_ADC,
+	AT91C_ID_UHPHS,
+	AT91C_ID_UDPHS,
+	AT91C_ID_LCDC,
+	AT91C_ID_ISI,
+	AT91C_ID_GMAC,
+	AT91C_ID_GMAC1,
+	AT91C_ID_SPI0,
+	AT91C_ID_SPI1,
+	AT91C_ID_SMD,
+	AT91C_ID_SSC0,
+	AT91C_ID_SSC1,
+};
+
+static int matrix_config_periheral(void)
+{
+	unsigned int *peri_id = security_ps_peri_id;
+	unsigned int array_size = sizeof(security_ps_peri_id) / sizeof(unsigned int);
+	int ret;
+
+	ret = matrix_configure_peri_security(peri_id, array_size);
+	if (ret)
+		return -1;
+
+	return 0;
+}
+
+static int matrix_init(void)
+{
+	int ret;
+
+	matrix_write_protect_disable(AT91C_BASE_MATRIX64);
+	matrix_write_protect_disable(AT91C_BASE_MATRIX32);
+
+	ret = matrix_configure_slave();
+	if (ret)
+		return -1;
+
+	ret = matrix_config_periheral();
+	if (ret)
+		return -1;
+
+	return 0;
+}
+#endif	/* #if defined(CONFIG_MATRIX) */
+
+#if defined(CONFIG_TWI)
+unsigned int at91_twi0_hw_init(void)
+{
+	unsigned int base_addr = AT91C_BASE_TWI0;
+
+	const struct pio_desc twi_pins[] = {
+		{"TWD0", AT91C_PIN_PA(30), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"TWCK0", AT91C_PIN_PA(31), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	pmc_enable_periph_clock(AT91C_ID_PIOA);
+	pio_configure(twi_pins);
+
+	pmc_enable_periph_clock(AT91C_ID_TWI0);
+
+	return base_addr;
+}
+
+unsigned int at91_twi1_hw_init(void)
+{
+	return 0;
+}
+
+unsigned int at91_twi2_hw_init(void)
+{
+	unsigned int base_addr = AT91C_BASE_TWI2;
+
+	const struct pio_desc twi_pins[] = {
+		{"TWD2", AT91C_PIN_PB(29), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"TWCK2", AT91C_PIN_PB(30), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	pmc_enable_periph_clock(AT91C_ID_PIOB);
+	pio_configure(twi_pins);
+
+	pmc_enable_periph_clock(AT91C_ID_TWI2);
+
+	return base_addr;
+}
+
+unsigned int at91_twi3_hw_init(void)
+{
+	unsigned int base_addr = AT91C_BASE_TWI3;
+
+	const struct pio_desc twi_pins[] = {
+		{"TWD3", AT91C_PIN_PC(25), 0, PIO_DEFAULT, PIO_PERIPH_B},
+		{"TWCK3", AT91C_PIN_PC(26), 0, PIO_DEFAULT, PIO_PERIPH_B},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	pmc_enable_periph_clock(AT91C_ID_PIOC);
+	pio_configure(twi_pins);
+
+	pmc_enable_periph_clock(AT91C_ID_TWI3);
+
+	return base_addr;
+}
+#endif
+
+#if defined(CONFIG_AUTOCONFIG_TWI_BUS)
+void at91_board_config_twi_bus(void)
+{
+	at24xx_twi_bus = 0;
+
+	attiny_twi_bus = 2;
+
+	act8865_twi_bus = 3;
+}
+#endif
+
+#if defined(CONFIG_ACT8865_SET_VOLTAGE)
+int at91_board_act8865_set_reg_voltage(void)
+{
+	unsigned char reg, value;
+	int ret;
+
+	/* Check ACT8865 I2C interface */
+	if (act8865_check_i2c_disabled())
+		return 0;
+
+	/* Enable REG5 output 3.3V */
+	reg = REG5_0;
+	value = ACT8865_3V3;
+	ret = act8865_set_reg_voltage(reg, value);
+	if (ret)
+		console_printf("ACT8865: Failed to make REG5 output 3300mV\n");
+
+	/* Enable REG6 output 1.8V */
+	reg = REG6_0;
+	value = ACT8865_1V8;
+	ret = act8865_set_reg_voltage(reg, value);
+	if (ret)
+		console_printf("ACT8865: Failed to make REG6 output 1800mV\n");
+
+	return 0;
+}
+#endif
+
+#if defined(CONFIG_PM)
+void at91_disable_smd_clock(void)
+{
+	/*
+	 * set pin DIBP to pull-up and DIBN to pull-down
+	 * to save power on VDDIOP0
+	 */
+	pmc_enable_system_clock(AT91C_PMC_SMDCK);
+	pmc_set_smd_clock_divider(AT91C_PMC_SMDDIV);
+	pmc_enable_periph_clock(AT91C_ID_SMD);
+	writel(0xF, (0x0C + AT91C_BASE_SMD));
+	pmc_disable_periph_clock(AT91C_ID_SMD);
+	pmc_disable_system_clock(AT91C_PMC_SMDCK);
+}
+#endif
+
+#if defined(CONFIG_MAC0_PHY)
+unsigned int at91_eth0_hw_init(void)
+{
+	unsigned int base_addr = AT91C_BASE_GMAC;
+
+	const struct pio_desc macb_pins[] = {
+		{"G0_MDC",	AT91C_PIN_PB(16), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{"G0_MDIO",	AT91C_PIN_PB(17), 0, PIO_DEFAULT, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	pio_configure(macb_pins);
+	pmc_enable_periph_clock(AT91C_ID_PIOB);
+
+	pmc_enable_periph_clock(AT91C_ID_GMAC);
+
+	return base_addr;
+}
+#endif
+
+#if defined(CONFIG_MACB)
+void at91_disable_mac_clock(void)
+{
+#if defined(CONFIG_MAC0_PHY)
+	pmc_disable_periph_clock(AT91C_ID_GMAC);
+#endif
+}
+#endif
+
+#ifdef CONFIG_HW_INIT
+void hw_init(void)
+{
+	/* Disable watchdog */
+	at91_disable_wdt();
+
+	/* At this stage the main oscillator is supposed
+	 * to be enabled PCK = MCK = MOSC
+	 */
+
+	/* Switch PCK/MCK on Main clock output */
+	pmc_cfg_mck(BOARD_PRESCALER_MAIN_CLOCK);
+
+	/* Configure PLLA = MOSC * (PLL_MULA + 1) / PLL_DIVA */
+	pmc_cfg_plla(PLLA_SETTINGS);
+
+	/* Initialize PLLA charge pump */
+	/* not needed for SAMA5D4 */
+	pmc_init_pll(0);
+
+	/* Switch MCK on PLLA output */
+	pmc_cfg_mck(BOARD_PRESCALER_PLLA);
+
+	/* Enable External Reset */
+	writel(AT91C_RSTC_KEY_UNLOCK | AT91C_RSTC_URSTEN,
+					AT91C_BASE_RSTC + RSTC_RMR);
+
+#if defined(CONFIG_ENTER_NWD)
+	cpacr_init();
+
+	/* Program the DACR to allow client access to *all* domains */
+	dacr_swd_init();
+#endif
+
+#if defined(CONFIG_MATRIX)
+	/* Initialize the matrix */
+	matrix_init();
+#endif
+
+	/* initialize the dbgu */
+	initialize_dbgu();
+
+#if defined(CONFIG_MATRIX)
+	matrix_read_slave_security();
+	matrix_read_periperal_security();
+#endif
+
+	/* Init timer */
+	timer_init();
+
+#ifdef CONFIG_DDR2
+	/* Initialize MPDDR Controller */
+	ddramc_init();
+#endif
+
+	/* Prepare L2 cache setup */
+	l2cache_prepare();
+
+#if defined(CONFIG_TWI)
+	twi_init();
+#endif
+
+	// init PIOB IOs
+	const struct pio_desc piob_pins[] = {
+		{"G0_TXCK", AT91C_PIN_PB(0), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_TXEN", AT91C_PIN_PB(2), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_RXDV", AT91C_PIN_PB(6), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_RXER", AT91C_PIN_PB(7), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_RXD0", AT91C_PIN_PB(8), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_RXD1", AT91C_PIN_PB(9), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_TXD0", AT91C_PIN_PB(12), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_TXD1", AT91C_PIN_PB(13), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_MDC", AT91C_PIN_PB(16), 0, PIO_DEFAULT, PIO_INPUT},
+		{"G0_MDIO", AT91C_PIN_PB(17), 0, PIO_DEFAULT, PIO_INPUT},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure the PIO controller */
+	pio_configure(piob_pins);
+
+	// init PIOE IOs
+	const struct pio_desc pioe_pins[] = {
+		{"G0_IRQ", AT91C_PIN_PE(0), 0, PIO_DEFAULT, PIO_INPUT},
+		{"MCI1_CD", AT91C_PIN_PE(3), 0, PIO_DEFAULT, PIO_INPUT},
+		{"CTS3", AT91C_PIN_PE(5), 0, PIO_DEFAULT, PIO_INPUT},
+		{"PMIC_IRQ", AT91C_PIN_PE(25), 0, PIO_DEFAULT, PIO_INPUT},
+		{"USB_SENSE", AT91C_PIN_PE(31), 0, PIO_DEFAULT, PIO_INPUT},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure the PIO controller */
+	pio_configure(pioe_pins);
+
+	pmc_enable_periph_clock(AT91C_ID_PIOB);
+	pmc_enable_periph_clock(AT91C_ID_PIOE);
+}
+#endif /* #ifdef CONFIG_HW_INIT */
+
+#ifdef CONFIG_SDCARD
+#ifdef CONFIG_OF_LIBFDT
+void at91_board_set_dtb_name(char *of_name)
+{
+	strcpy(of_name, "lorix_one_512.dtb");
+}
+#endif
+
+void at91_mci0_hw_init(void)
+{
+	const struct pio_desc mci_pins[] = {
+		{"MCI1_CK", AT91C_PIN_PE(18), 0, PIO_DEFAULT, PIO_PERIPH_C},
+		{"MCI1_CDA", AT91C_PIN_PE(19), 0, PIO_DEFAULT, PIO_PERIPH_C},
+
+		{"MCI1_DA0", AT91C_PIN_PE(20), 0, PIO_DEFAULT, PIO_PERIPH_C},
+		{"MCI1_DA1", AT91C_PIN_PE(21), 0, PIO_DEFAULT, PIO_PERIPH_C},
+		{"MCI1_DA2", AT91C_PIN_PE(22), 0, PIO_DEFAULT, PIO_PERIPH_C},
+		{"MCI1_DA3", AT91C_PIN_PE(23), 0, PIO_DEFAULT, PIO_PERIPH_C},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure the PIO controller */
+	pio_configure(mci_pins);
+	pmc_enable_periph_clock(AT91C_ID_PIOE);
+	pmc_enable_periph_clock(AT91C_ID_HSMCI1);
+}
+#endif /* #ifdef CONFIG_SDCARD */
+
+#ifdef CONFIG_NANDFLASH
+void nandflash_hw_init(void)
+{
+	/* Configure nand pins */
+	const struct pio_desc nand_pins[] = {
+		{"NANDOE",	CONFIG_SYS_NAND_OE_PIN,
+					0, PIO_PULLUP, PIO_PERIPH_A},
+		{"NANDWE",	CONFIG_SYS_NAND_WE_PIN,
+					0, PIO_PULLUP, PIO_PERIPH_A},
+		{"NANDALE",	CONFIG_SYS_NAND_ALE_PIN,
+					0, PIO_PULLUP, PIO_PERIPH_A},
+		{"NANDCLE",	CONFIG_SYS_NAND_CLE_PIN,
+					0, PIO_PULLUP, PIO_PERIPH_A},
+		{"NANDCS",	CONFIG_SYS_NAND_ENABLE_PIN,
+					1, PIO_DEFAULT, PIO_OUTPUT},
+		{"D0",	AT91C_PIN_PC(5), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D1",	AT91C_PIN_PC(6), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D2",	AT91C_PIN_PC(7), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D3",	AT91C_PIN_PC(8), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D4",	AT91C_PIN_PC(9), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D5",	AT91C_PIN_PC(10), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D6",	AT91C_PIN_PC(11), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{"D7",	AT91C_PIN_PC(12), 0, PIO_PULLUP, PIO_PERIPH_A},
+		{(char *)0, 0, 0, PIO_DEFAULT, PIO_PERIPH_A},
+	};
+
+	/* Configure the nand controller pins*/
+	pio_configure(nand_pins);
+	pmc_enable_periph_clock(AT91C_ID_PIOC);
+
+	/* Enable the clock */
+	pmc_enable_periph_clock(AT91C_ID_HSMC);
+
+	/* EBI Configuration Register */
+	writel((AT91C_EBICFG_DRIVE0_HIGH
+		| AT91C_EBICFG_PULL0_NONE
+		| AT91C_EBICFG_DRIVE1_HIGH
+		| AT91C_EBICFG_PULL1_NONE), SFR_EBICFG + AT91C_BASE_SFR);
+
+	/* Configure SMC CS3 for NAND/SmartMedia */
+	writel(AT91C_SMC_SETUP_NWE(1)
+		| AT91C_SMC_SETUP_NCS_WR(1)
+		| AT91C_SMC_SETUP_NRD(1)
+		| AT91C_SMC_SETUP_NCS_RD(1),
+		(ATMEL_BASE_SMC + SMC_SETUP3));
+
+	writel(AT91C_SMC_PULSE_NWE(2)
+		| AT91C_SMC_PULSE_NCS_WR(3)
+		| AT91C_SMC_PULSE_NRD(2)
+		| AT91C_SMC_PULSE_NCS_RD(3),
+		(ATMEL_BASE_SMC + SMC_PULSE3));
+
+	writel(AT91C_SMC_CYCLE_NWE(5)
+		| AT91C_SMC_CYCLE_NRD(5),
+		(ATMEL_BASE_SMC + SMC_CYCLE3));
+
+	writel(AT91C_SMC_TIMINGS_TCLR(2)
+		| AT91C_SMC_TIMINGS_TADL(7)
+		| AT91C_SMC_TIMINGS_TAR(2)
+		| AT91C_SMC_TIMINGS_TRR(3)
+		| AT91C_SMC_TIMINGS_TWB(7)
+		| AT91C_SMC_TIMINGS_RBNSEL(2)
+		| AT91C_SMC_TIMINGS_NFSEL,
+		(ATMEL_BASE_SMC + SMC_TIMINGS3));
+
+	writel(AT91C_SMC_MODE_READMODE_NRD_CTRL
+		| AT91C_SMC_MODE_WRITEMODE_NWE_CTRL
+		| AT91C_SMC_MODE_DBW_8
+		| AT91C_SMC_MODE_TDF_CYCLES(1),
+		(ATMEL_BASE_SMC + SMC_MODE3));
+}
+#endif /* #ifdef CONFIG_NANDFLASH */
+
+#if defined(CONFIG_TWI)
+void twi_init()
+{
+	twi_bus_init(at91_twi0_hw_init);
+	twi_bus_init(at91_twi1_hw_init);
+	twi_bus_init(at91_twi2_hw_init);
+	twi_bus_init(at91_twi3_hw_init);
+#if defined(CONFIG_AUTOCONFIG_TWI_BUS)
+	dbg_loud("Auto-Config the TWI Bus by the board\n");
+	at91_board_config_twi_bus();
+#endif
+}
+#endif
diff --git a/contrib/board/wifx/lorix_one_512/lorix_one_512.h b/contrib/board/wifx/lorix_one_512/lorix_one_512.h
new file mode 100644
index 0000000..18f1f41
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_512/lorix_one_512.h
@@ -0,0 +1,97 @@
+/* ----------------------------------------------------------------------------
+ *         ATMEL Microcontroller Software Support
+ * ----------------------------------------------------------------------------
+ * Copyright (c) 2014, Atmel Corporation
+ * Copyright (c) 2016-2020, Wifx SÃ rl
+ *                          Yannick Lanz <yannick.lanz@wifx.net>
+ *
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * - Redistributions of source code must retain the above copyright notice,
+ * this list of conditions and the disclaimer below.
+ *
+ * Atmel's name may not be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
+ * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
+ * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+#ifndef __LORIX_ONE_512_H__
+#define __LORIX_ONE_512_H__
+
+/*
+ * PMC Setting
+ *
+ * The main oscillator is enabled as soon as possible in the lowlevel_clock_init
+ * and MCK is switched on the main oscillator.
+ */
+#define BOARD_MAINOSC		12000000
+
+#if defined(CONFIG_CPU_CLK_600MHZ)
+
+/* PCK: 600MHz, MCK: 200MHz */
+#define BOARD_PLLA_MULA		99
+
+#define BOARD_PCK		((unsigned long)((BOARD_MAINOSC * (BOARD_PLLA_MULA + 1)) / 2))
+#define BOARD_MCK		((unsigned long)((BOARD_MAINOSC * (BOARD_PLLA_MULA + 1)) / 2 / 3))
+
+#define BOARD_CKGR_PLLA		(AT91C_CKGR_SRCA | AT91C_CKGR_OUTA_0)
+#define BOARD_PLLACOUNT		(0x3F << 8)
+#define BOARD_MULA		((AT91C_CKGR_MULA << 2) & (BOARD_PLLA_MULA << 18))
+#define BOARD_DIVA		(AT91C_CKGR_DIVA & 1)
+
+/* Master Clock Register */
+#define BOARD_PRESCALER_MAIN_CLOCK	(AT91C_PMC_PLLADIV2_2 \
+					| AT91C_PMC_MDIV_3 \
+					| AT91C_PMC_CSS_MAIN_CLK)
+
+#define BOARD_PRESCALER_PLLA		(AT91C_PMC_H32MXDIV_H32MXDIV2 \
+					| AT91C_PMC_PLLADIV2_2 \
+					| AT91C_PMC_MDIV_3 \
+					| AT91C_PMC_CSS_PLLA_CLK)
+
+#define MASTER_CLOCK		200000000
+
+#else
+#error "No CLK setting defined"
+#endif
+
+#define PLLA_SETTINGS		(BOARD_CKGR_PLLA | \
+				BOARD_PLLACOUNT | \
+				BOARD_MULA | \
+				BOARD_DIVA)
+
+#define	USART_BASE	AT91C_BASE_USART3
+
+/*
+ * NandFlash Settings
+ */
+#define CONFIG_SYS_NAND_BASE			AT91C_BASE_CS3
+#define CONFIG_SYS_NAND_MASK_ALE		(1 << 21)
+#define CONFIG_SYS_NAND_MASK_CLE		(1 << 22)
+
+#define CONFIG_SYS_NAND_OE_PIN			AT91C_PIN_PC(13)
+#define CONFIG_SYS_NAND_WE_PIN			AT91C_PIN_PC(14)
+#define CONFIG_SYS_NAND_ALE_PIN			AT91C_PIN_PC(17)
+#define CONFIG_SYS_NAND_CLE_PIN			AT91C_PIN_PC(18)
+#define CONFIG_SYS_NAND_ENABLE_PIN		AT91C_PIN_PC(15)
+
+#define	NO_GALOIS_TABLE_IN_ROM
+
+/*
+ * MCI Settings
+ */
+#define CONFIG_SYS_BASE_MCI	AT91C_BASE_HSMCI1
+
+#endif /* __LORIX_ONE_512_H__ */
diff --git a/contrib/board/wifx/lorix_one_512/lorix_one_512_nf_uboot_defconfig b/contrib/board/wifx/lorix_one_512/lorix_one_512_nf_uboot_defconfig
new file mode 100644
index 0000000..2e1394f
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_512/lorix_one_512_nf_uboot_defconfig
@@ -0,0 +1,9 @@
+CONFIG_LORIX_ONE_512=y
+CONFIG_CPU_CLK_600MHZ=y
+CONFIG_RAM_128MB=y
+CONFIG_IMG_SIZE="0x000C0000"
+CONFIG_DEBUG=y
+# CONFIG_DISABLE_WATCHDOG is not set
+# CONFIG_ENTER_NWD is not set
+CONFIG_ACT8865_SET_VOLTAGE=y
+# CONFIG_DISABLE_ACT8865_I2C is not set
diff --git a/contrib/board/wifx/lorix_one_512/lorix_one_512_sd_uboot_defconfig b/contrib/board/wifx/lorix_one_512/lorix_one_512_sd_uboot_defconfig
new file mode 100644
index 0000000..2a3dbfc
--- /dev/null
+++ b/contrib/board/wifx/lorix_one_512/lorix_one_512_sd_uboot_defconfig
@@ -0,0 +1,9 @@
+CONFIG_LORIX_ONE_512=y
+CONFIG_CPU_CLK_600MHZ=y
+CONFIG_RAM_128MB=y
+CONFIG_SDCARD=y
+CONFIG_DEBUG=y
+# CONFIG_DISABLE_WATCHDOG is not set
+# CONFIG_ENTER_NWD is not set
+CONFIG_ACT8865_SET_VOLTAGE=y
+# CONFIG_DISABLE_ACT8865_I2C is not set
diff --git a/contrib/include/contrib_board.h b/contrib/include/contrib_board.h
index 6579b72..3ef4ab7 100644
--- a/contrib/include/contrib_board.h
+++ b/contrib/include/contrib_board.h
@@ -65,4 +65,12 @@
 #include "sama5d3_linea.h"
 #endif
 
+#ifdef CONFIG_LORIX_ONE_256
+#include "lorix_one_256.h"
+#endif
+
+#ifdef CONFIG_LORIX_ONE_512
+#include "lorix_one_512.h"
+#endif
+
 #endif
diff --git a/driver/at91_twi.c b/driver/at91_twi.c
index cf65231..b3eabdc 100644
--- a/driver/at91_twi.c
+++ b/driver/at91_twi.c
@@ -52,6 +52,7 @@ unsigned char hdmi_twi_bus;
 unsigned char wm8904_twi_bus;
 unsigned char act8865_twi_bus;
 unsigned char at24xx_twi_bus;
+unsigned char attiny_twi_bus;
 
 #define AT91_MAX_TWI_SUPPORTED		16
 
@@ -289,6 +290,7 @@ void twi_bus_init(unsigned int (*at91_twi_hw_init)(void))
 	wm8904_twi_bus	= 0xff;
 	act8865_twi_bus	= 0xff;
 	at24xx_twi_bus	= 0xff;
+	attiny_twi_bus	= 0xff;
 
 	twi_init_done = 1;
 }
diff --git a/driver/board_hw_info.c b/driver/board_hw_info.c
index 92da730..72d710a 100644
--- a/driver/board_hw_info.c
+++ b/driver/board_hw_info.c
@@ -485,6 +485,22 @@ static unsigned int set_default_sn(void)
 #elif defined(CONFIG_SAMA5D2_ICP)
 	board_id_ek = BOARD_ID_SAMA5D2_ICP;
 	vendor_ek = VENDOR_MCHIP_RFO;
+#elif defined(CONFIG_LORIX_ONE_256)
+    /*
+     * LORIX One (256MB NAND version)
+     * Display Module: no
+     * EK Module: LORIX_ONE_256, WIFX
+     */
+    board_id_ek = BOARD_ID_LORIX_ONE_256;
+    vendor_cm = VENDOR_WIFX;
+#elif defined(CONFIG_LORIX_ONE_512)
+    /*
+     * LORIX One (512MB NAND version)
+     * Display Module: no
+     * EK Module: LORIX_ONE_512, WIFX
+     */
+    board_id_ek = BOARD_ID_LORIX_ONE_512;
+    vendor_cm = VENDOR_WIFX;
 #elif defined(CONFIG_SAM9X60EK) || defined(CONFIG_SAM9X60_DDR2_SIP_EB) || defined(CONFIG_SAM9X60_SDR_SIP_EB)
 	/* sam9x60ek ; sam9x60 ddr2 sip eb and sam9x60 sdr sip eb
 	 */
@@ -565,6 +581,30 @@ static unsigned int set_default_rev(void)
 	rev_id_cm = '1';
 	rev_id_dm = '1';
 	rev_id_ek = '1';
+#elif defined(CONFIG_LORIX_ONE_256)
+    /*
+     * LORIX One (256MB NAND version)
+     * Display Module: 'B', '2'
+     * EK Module: 'B','3'
+     */
+    rev_cm = 'A';
+    rev_dm = 'A';
+    rev_ek = 'A';
+    rev_id_cm = '1';
+    rev_id_dm = '1';
+    rev_id_ek = '1';
+#elif defined(CONFIG_LORIX_ONE_512)
+    /*
+     * LORIX One (512MB NAND version)
+     * Display Module: 'B', '2'
+     * EK Module: 'B','3'
+     */
+    rev_cm = 'A';
+    rev_dm = 'A';
+    rev_ek = 'A';
+    rev_id_cm = '1';
+    rev_id_dm = '1';
+    rev_id_ek = '1';
 #elif defined(CONFIG_SAM9X60EK)
 	rev_cm = 'A';
 	rev_dm = 'A';
diff --git a/include/board_hw_info.h b/include/board_hw_info.h
index a53fce6..a41060e 100644
--- a/include/board_hw_info.h
+++ b/include/board_hw_info.h
@@ -51,6 +51,8 @@
 #define	BOARD_ID_SAMA5D2_XULT	19
 #define	BOARD_ID_SAMA5D2_ICP	20
 #define	BOARD_ID_SAM9X60_EK	21
+#define BOARD_ID_LORIX_ONE_512	98
+#define BOARD_ID_LORIX_ONE_256	99
 
 /* Vendor id definition */
 #define VENDOR_EMBEST		1
@@ -61,6 +63,7 @@
 #define VENDOR_ATMEL_RFO	6
 #define VENDOR_MCHIP_RFO	7
 #define VENDOR_MCHIP_RDC	8
+#define VENDOR_WIFX		9
 
 #define HW_INFO_TOTAL_SIZE	0x20
 
diff --git a/include/twi.h b/include/twi.h
index 3e13899..01502b2 100644
--- a/include/twi.h
+++ b/include/twi.h
@@ -32,6 +32,7 @@ extern unsigned char hdmi_twi_bus;
 extern unsigned char wm8904_twi_bus;
 extern unsigned char act8865_twi_bus;
 extern unsigned char at24xx_twi_bus;
+extern unsigned char attiny_twi_bus;
 
 extern unsigned int twi_init_done;
 
diff --git a/scripts/addpmecchead.py b/scripts/addpmecchead.py
index 6e68e02..9f90773 100755
--- a/scripts/addpmecchead.py
+++ b/scripts/addpmecchead.py
@@ -25,8 +25,12 @@ elif sys.argv[3] == "sam9x60_sdr_sip_eb":
 	pmecc_word = pmecc_head.gen_pmecc_header(4096, 224, 8, 512)
 elif sys.argv[3] == "core9g25":
 	pmecc_word = pmecc_head.gen_pmecc_header(2048, 64, 2, 512)
+elif sys.argv[3] == "lorix_one_256":
+	pmecc_word = pmecc_head.gen_pmecc_header(2048, 64, 4, 512)
+elif sys.argv[3] == "lorix_one_512":
+	pmecc_word = pmecc_head.gen_pmecc_header(4096, 224, 8, 512)
 else:
-	sys.exit("Not support board!")
+	sys.exit("Not supported board!")
 
 vec = struct.pack("<I", pmecc_word)
 
-- 
2.25.1

