@version: 3.19

@define volatileLogPath "/var/log"
@define persistentLogPath "/var/log-persistent"
@define defaultLogPath "`volatileLogPath`"

options { 
    flush_lines(0);
    frac_digits(3);
    ts-format(iso);
    file-template(t_file);

    owner("admin"); 
    group("admin");
    perm(0644);

    create-dirs(yes);
    dir-owner("admin"); 
    dir-group("admin");
    dir-perm(0755);
};

template t_file {
    template("${ISODATE} ${FACILITY} ${LEVEL} ${MSGHDR}${MSG}\n");
};


source s_local {
    unix-dgram("/dev/log");
    internal();
};

filter f_dbg    { level(debug);                                                 };
filter f_info   { level(info);                                                  };
filter f_notice { level(notice);                                                };
filter f_warn   { level(warn);                                                  };
filter f_err    { level(err);                                                   };
filter f_crit   { level(crit .. emerg);                                         };
filter f_debug  { level(debug) and not facility(auth, authpriv, news, mail);    };
filter f_error  { level(err .. emerg) ;                                         };

# All
destination d_file {
    file("`defaultLogPath`/all.log");
};

log {
    source(s_local);
    destination(d_file);
};

# Facilities
filter f_auth       { not filter(f_debug) and     facility(auth, authpriv);         };
filter f_cron       { not filter(f_debug) and     facility(cron);                   };
filter f_daemon     { not filter(f_debug) and     facility(daemon);                 };
filter f_kern       { not filter(f_debug) and     facility(kern);                   };
filter f_lpr        { not filter(f_debug) and     facility(lpr);                    };
filter f_local      { not filter(f_debug) and     facility(local0 .. local7);       };
filter f_mail       { not filter(f_debug) and     facility(mail);                   };
filter f_news       { not filter(f_debug) and     facility(news);                   };
filter f_user       { not filter(f_debug) and     facility(user);                   };
filter f_uucp       { not filter(f_debug) and     facility(uucp);                   };

destination d_auth      { file("`defaultLogPath`/facilities/auth.log");     };
destination d_cron      { file("`defaultLogPath`/facilities/cron.log");     };
destination d_daemon    { file("`defaultLogPath`/facilities/daemon.log");   };
destination d_kern      { file("`defaultLogPath`/facilities/kern.log");     };
destination d_lpr       { file("`defaultLogPath`/facilities/lpr.log");      };
destination d_mail      { file("`defaultLogPath`/facilities/mail.log");     };
destination d_user      { file("`defaultLogPath`/facilities/user.log");     };
destination d_uucp      { file("`defaultLogPath`/facilities/uucp.log");     };


log { source(s_local);  filter(f_auth);      destination(d_auth);   };
log { source(s_local);  filter(f_cron);      destination(d_cron);   };
log { source(s_local);  filter(f_daemon);    destination(d_daemon); };
log { source(s_local);  filter(f_kern);      destination(d_kern);   };
log { source(s_local);  filter(f_lpr);       destination(d_lpr);    };
log { source(s_local);  filter(f_user);      destination(d_user);   };
log { source(s_local);  filter(f_uucp);      destination(d_uucp);   };

# Syslog
destination d_syslog { 
    file("`defaultLogPath`/syslog.log");
};

filter f_syslog3 { 
    not filter(f_debug) and not facility(auth, authpriv, mail);   
};

log { 
    source(s_local);  
    filter(f_syslog3);   
    destination(d_syslog);
};

# Manager
destination d_manager {
    file("`defaultLogPath`/manager.log");
};

filter f_manager {
    program(manager);
};

log {
    source(s_local);
    filter(f_manager);
    destination(d_manager);
};


# Applicative
destination d_app {
    file("`defaultLogPath`/forwarder.log");
};

filter f_app {
    facility(local0 .. local1);
};

log {
    source(s_local);
    filter(f_app);
    destination(d_app);
};

# Errors
destination d_errors {
    file("`defaultLogPath`/errors.log");
};

log {
    source(s_local);
    filter(f_error);
    destination(d_errors);
};
