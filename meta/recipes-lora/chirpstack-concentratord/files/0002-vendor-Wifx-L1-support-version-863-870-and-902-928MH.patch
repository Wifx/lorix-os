From 36e6c681684546e3577f52a248b674fcf0eb46e2 Mon Sep 17 00:00:00 2001
From: Yannick Lanz <yannick.lanz@wifx.net>
Date: Mon, 21 Mar 2022 09:46:14 +0100
Subject: [PATCH 2/2] vendor: Wifx L1 support, version 863-870 and 902-928MHz
 hardware with dynamic antenna gain

Signed-off-by: Yannick Lanz <yannick.lanz@wifx.net>
---
 .../src/config/mod.rs                         |   2 +
 .../src/config/vendor/mod.rs                  |   1 +
 .../src/config/vendor/wifx/l1_863_870.rs      | 103 ++++++++++++++++++
 .../src/config/vendor/wifx/l1_902_928.rs      | 103 ++++++++++++++++++
 .../src/config/vendor/wifx/mod.rs             |  38 +++++++
 5 files changed, 247 insertions(+)
 create mode 100644 chirpstack-concentratord-sx1302/src/config/vendor/wifx/l1_863_870.rs
 create mode 100644 chirpstack-concentratord-sx1302/src/config/vendor/wifx/l1_902_928.rs
 create mode 100644 chirpstack-concentratord-sx1302/src/config/vendor/wifx/mod.rs

diff --git a/chirpstack-concentratord-sx1302/src/config/mod.rs b/chirpstack-concentratord-sx1302/src/config/mod.rs
index ad54401..b2f41c7 100644
--- a/chirpstack-concentratord-sx1302/src/config/mod.rs
+++ b/chirpstack-concentratord-sx1302/src/config/mod.rs
@@ -172,6 +172,8 @@ pub fn get(filenames: Vec<String>) -> Configuration {
         "rak_2287_kr920" => vendor::rak::rak2287_kr920::new(&config),
         "rak_2287_ru864" => vendor::rak::rak2287_ru864::new(&config),
         "rak_2287_us915" => vendor::rak::rak2287_us915::new(&config),
+        "wifx_l1_863_870" => vendor::wifx::l1_863_870::new(&config),
+        "wifx_l1_902_928" => vendor::wifx::l1_902_928::new(&config),
         _ => panic!("unexpected gateway model: {}", config.gateway.model),
     };
 
diff --git a/chirpstack-concentratord-sx1302/src/config/vendor/mod.rs b/chirpstack-concentratord-sx1302/src/config/vendor/mod.rs
index f530583..15592c8 100644
--- a/chirpstack-concentratord-sx1302/src/config/vendor/mod.rs
+++ b/chirpstack-concentratord-sx1302/src/config/vendor/mod.rs
@@ -2,6 +2,7 @@ use libloragw_sx1302::hal;
 
 pub mod rak;
 pub mod semtech;
+pub mod wifx;
 
 #[derive(Clone)]
 pub enum ComType {
diff --git a/chirpstack-concentratord-sx1302/src/config/vendor/wifx/l1_863_870.rs b/chirpstack-concentratord-sx1302/src/config/vendor/wifx/l1_863_870.rs
new file mode 100644
index 0000000..aef2c13
--- /dev/null
+++ b/chirpstack-concentratord-sx1302/src/config/vendor/wifx/l1_863_870.rs
@@ -0,0 +1,103 @@
+use libloragw_sx1302::hal;
+
+use super::super::super::super::config;
+use super::super::{ComType, Configuration, RadioConfig};
+
+pub fn new(conf: &config::Configuration) -> Configuration {
+    Configuration {
+        radio_count: 2,
+        clock_source: 1,
+        full_duplex: false,
+        lora_multi_sf_bandwidth: 125000,
+        radio_config: vec![
+            RadioConfig {
+                enable: true,
+                radio_type: hal::RadioType::SX1250,
+                single_input_mode: true,
+                rssi_offset: -215.4,
+                rssi_temp_compensation: hal::RssiTempCompensationConfig {
+                    coeff_a: 0.0,
+                    coeff_b: 0.0,
+                    coeff_c: 20.41,
+                    coeff_d: 2162.56,
+                    coeff_e: 0.0,
+                },
+                tx_enable: true,
+                tx_freq_min: 863000000,
+                tx_freq_max: 870000000,
+                tx_gain_table: super::get_tx_gain_table(
+                    POWER_TABLE_BASE.to_vec(),
+                    conf.gateway.antenna_gain,
+                ),
+            },
+            RadioConfig {
+                enable: true,
+                radio_type: hal::RadioType::SX1250,
+                single_input_mode: false,
+                rssi_offset: -215.4,
+                rssi_temp_compensation: hal::RssiTempCompensationConfig {
+                    coeff_a: 0.0,
+                    coeff_b: 0.0,
+                    coeff_c: 20.41,
+                    coeff_d: 2162.56,
+                    coeff_e: 0.0,
+                },
+                tx_enable: false,
+                tx_freq_min: 0,
+                tx_freq_max: 0,
+                tx_gain_table: vec![],
+            },
+        ],
+        gps_tty_path: None,
+        com_type: ComType::SPI,
+        com_path: "/dev/spidev0.0".to_string(),
+        reset_pin: match conf.gateway.reset_pin {
+            0 => Some((0, 1)),
+            _ => Some((0, conf.gateway.reset_pin)),
+        },
+        power_en_pin: match conf.gateway.power_en_pin {
+            0 => None,
+            _ => Some((0, conf.gateway.power_en_pin)),
+        },
+    }
+}
+
+// Power table with an antenna gain of 0dBi
+lazy_static! {
+    static ref POWER_TABLE_BASE: [hal::TxGainConfig; 21] = [
+        gain_param(7, 0, 7),
+        gain_param(8, 0, 8),
+        gain_param(9, 0, 9),
+        gain_param(10, 0, 10),
+        gain_param(11, 0, 11),
+        gain_param(12, 0, 12),
+        gain_param(13, 0, 13),
+        gain_param(14, 0, 14),
+        gain_param(15, 0, 15),
+        gain_param(16, 0, 16),
+        gain_param(17, 0, 18),
+        gain_param(18, 0, 19),
+        gain_param(19, 1, 0),
+        gain_param(20, 1, 1),
+        gain_param(21, 1, 2),
+        gain_param(22, 1, 3),
+        gain_param(23, 1, 4),
+        gain_param(24, 1, 5),
+        gain_param(25, 1, 7),
+        gain_param(26, 1, 9),
+        gain_param(27, 1, 14),
+    ];
+}
+
+fn gain_param(rf_power: i8, pa: u8, pwr_idx: u8) -> hal::TxGainConfig {
+    hal::TxGainConfig {
+        rf_power: rf_power,
+        dig_gain: 0,
+        pa_gain: pa,
+        dac_gain: 0,
+        mix_gain: 5,
+        offset_i: 0,
+        offset_q: 0,
+        pwr_idx: pwr_idx,
+    }
+}
diff --git a/chirpstack-concentratord-sx1302/src/config/vendor/wifx/l1_902_928.rs b/chirpstack-concentratord-sx1302/src/config/vendor/wifx/l1_902_928.rs
new file mode 100644
index 0000000..7526834
--- /dev/null
+++ b/chirpstack-concentratord-sx1302/src/config/vendor/wifx/l1_902_928.rs
@@ -0,0 +1,103 @@
+use libloragw_sx1302::hal;
+
+use super::super::super::super::config;
+use super::super::{ComType, Configuration, RadioConfig};
+
+pub fn new(conf: &config::Configuration) -> Configuration {
+    Configuration {
+        radio_count: 2,
+        clock_source: 1,
+        full_duplex: false,
+        lora_multi_sf_bandwidth: 125000,
+        radio_config: vec![
+            RadioConfig {
+                enable: true,
+                radio_type: hal::RadioType::SX1250,
+                single_input_mode: true,
+                rssi_offset: -215.4,
+                rssi_temp_compensation: hal::RssiTempCompensationConfig {
+                    coeff_a: 0.0,
+                    coeff_b: 0.0,
+                    coeff_c: 20.41,
+                    coeff_d: 2162.56,
+                    coeff_e: 0.0,
+                },
+                tx_enable: true,
+                tx_freq_min: 902000000,
+                tx_freq_max: 928000000,
+                tx_gain_table: super::get_tx_gain_table(
+                    POWER_TABLE_BASE.to_vec(),
+                    conf.gateway.antenna_gain,
+                ),
+            },
+            RadioConfig {
+                enable: true,
+                radio_type: hal::RadioType::SX1250,
+                single_input_mode: false,
+                rssi_offset: -215.4,
+                rssi_temp_compensation: hal::RssiTempCompensationConfig {
+                    coeff_a: 0.0,
+                    coeff_b: 0.0,
+                    coeff_c: 20.41,
+                    coeff_d: 2162.56,
+                    coeff_e: 0.0,
+                },
+                tx_enable: false,
+                tx_freq_min: 0,
+                tx_freq_max: 0,
+                tx_gain_table: vec![],
+            },
+        ],
+        gps_tty_path: None,
+        com_type: ComType::SPI,
+        com_path: "/dev/spidev0.0".to_string(),
+        reset_pin: match conf.gateway.reset_pin {
+            0 => Some((0, 1)),
+            _ => Some((0, conf.gateway.reset_pin)),
+        },
+        power_en_pin: match conf.gateway.power_en_pin {
+            0 => None,
+            _ => Some((0, conf.gateway.power_en_pin)),
+        },
+    }
+}
+
+// Power table with an antenna gain of 0dBi
+lazy_static! {
+    static ref POWER_TABLE_BASE: [hal::TxGainConfig; 21] = [
+        gain_param(7, 0, 8),
+        gain_param(8, 0, 9),
+        gain_param(9, 0, 10),
+        gain_param(10, 0, 11),
+        gain_param(11, 0, 12),
+        gain_param(12, 0, 13),
+        gain_param(13, 0, 14),
+        gain_param(14, 0, 15),
+        gain_param(15, 0, 16),
+        gain_param(16, 0, 17),
+        gain_param(17, 0, 18),
+        gain_param(18, 0, 19),
+        gain_param(19, 1, 0),
+        gain_param(20, 0, 22),
+        gain_param(21, 1, 2),
+        gain_param(22, 1, 3),
+        gain_param(23, 1, 4),
+        gain_param(24, 1, 6),
+        gain_param(25, 1, 8),
+        gain_param(26, 1, 11),
+        gain_param(27, 1, 15),
+    ];
+}
+
+fn gain_param(rf_power: i8, pa: u8, pwr_idx: u8) -> hal::TxGainConfig {
+    hal::TxGainConfig {
+        rf_power: rf_power,
+        dig_gain: 0,
+        pa_gain: pa,
+        dac_gain: 0,
+        mix_gain: 5,
+        offset_i: 0,
+        offset_q: 0,
+        pwr_idx: pwr_idx,
+    }
+}
diff --git a/chirpstack-concentratord-sx1302/src/config/vendor/wifx/mod.rs b/chirpstack-concentratord-sx1302/src/config/vendor/wifx/mod.rs
new file mode 100644
index 0000000..b0eb8f6
--- /dev/null
+++ b/chirpstack-concentratord-sx1302/src/config/vendor/wifx/mod.rs
@@ -0,0 +1,38 @@
+pub mod l1_863_870;
+pub mod l1_902_928;
+
+use libloragw_sx1302::hal;
+
+fn get_tx_gain_table(
+    base_table: Vec<hal::TxGainConfig>,
+    antenna_gain: i8,
+) -> Vec<hal::TxGainConfig> {
+    // filter the power values
+    let entries: Vec<hal::TxGainConfig> = base_table
+        .iter()
+        .map(|entry| entry.clone())
+        .filter(|entry| {
+            let radiated_power = entry.rf_power + antenna_gain;
+            if radiated_power > 27 {
+                debug!(
+                    "Power table entry including antenna gain is too high, radiated power: {}, discarded",
+                    radiated_power
+                );
+                    return false;
+                }
+            return true;
+        })
+        .collect();
+
+    let count = entries.len();
+    if count == 0 {
+        panic!("No entries available for power table");
+    }
+    let mut start_index = 0;
+    if count > 16 {
+        start_index = count - 16;
+    }
+
+    // keep only max 16 higher entries
+    entries.as_slice()[start_index..].to_vec()
+}
-- 
2.25.1

